
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Recruitment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Recruitment
 * 
 */
export type RecruitmentModel = runtime.Types.Result.DefaultSelection<Prisma.$RecruitmentPayload>

export type AggregateRecruitment = {
  _count: RecruitmentCountAggregateOutputType | null
  _min: RecruitmentMinAggregateOutputType | null
  _max: RecruitmentMaxAggregateOutputType | null
}

export type RecruitmentMinAggregateOutputType = {
  id: string | null
  jobTitle: string | null
  slug: string | null
  description: string | null
  requirements: string | null
  deadline: Date | null
  createdAt: Date | null
}

export type RecruitmentMaxAggregateOutputType = {
  id: string | null
  jobTitle: string | null
  slug: string | null
  description: string | null
  requirements: string | null
  deadline: Date | null
  createdAt: Date | null
}

export type RecruitmentCountAggregateOutputType = {
  id: number
  jobTitle: number
  slug: number
  description: number
  requirements: number
  deadline: number
  createdAt: number
  _all: number
}


export type RecruitmentMinAggregateInputType = {
  id?: true
  jobTitle?: true
  slug?: true
  description?: true
  requirements?: true
  deadline?: true
  createdAt?: true
}

export type RecruitmentMaxAggregateInputType = {
  id?: true
  jobTitle?: true
  slug?: true
  description?: true
  requirements?: true
  deadline?: true
  createdAt?: true
}

export type RecruitmentCountAggregateInputType = {
  id?: true
  jobTitle?: true
  slug?: true
  description?: true
  requirements?: true
  deadline?: true
  createdAt?: true
  _all?: true
}

export type RecruitmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Recruitment to aggregate.
   */
  where?: Prisma.RecruitmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Recruitments to fetch.
   */
  orderBy?: Prisma.RecruitmentOrderByWithRelationInput | Prisma.RecruitmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RecruitmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Recruitments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Recruitments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Recruitments
  **/
  _count?: true | RecruitmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RecruitmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RecruitmentMaxAggregateInputType
}

export type GetRecruitmentAggregateType<T extends RecruitmentAggregateArgs> = {
      [P in keyof T & keyof AggregateRecruitment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRecruitment[P]>
    : Prisma.GetScalarType<T[P], AggregateRecruitment[P]>
}




export type RecruitmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RecruitmentWhereInput
  orderBy?: Prisma.RecruitmentOrderByWithAggregationInput | Prisma.RecruitmentOrderByWithAggregationInput[]
  by: Prisma.RecruitmentScalarFieldEnum[] | Prisma.RecruitmentScalarFieldEnum
  having?: Prisma.RecruitmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RecruitmentCountAggregateInputType | true
  _min?: RecruitmentMinAggregateInputType
  _max?: RecruitmentMaxAggregateInputType
}

export type RecruitmentGroupByOutputType = {
  id: string
  jobTitle: string
  slug: string
  description: string | null
  requirements: string
  deadline: Date
  createdAt: Date
  _count: RecruitmentCountAggregateOutputType | null
  _min: RecruitmentMinAggregateOutputType | null
  _max: RecruitmentMaxAggregateOutputType | null
}

type GetRecruitmentGroupByPayload<T extends RecruitmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RecruitmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RecruitmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RecruitmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RecruitmentGroupByOutputType[P]>
      }
    >
  >



export type RecruitmentWhereInput = {
  AND?: Prisma.RecruitmentWhereInput | Prisma.RecruitmentWhereInput[]
  OR?: Prisma.RecruitmentWhereInput[]
  NOT?: Prisma.RecruitmentWhereInput | Prisma.RecruitmentWhereInput[]
  id?: Prisma.StringFilter<"Recruitment"> | string
  jobTitle?: Prisma.StringFilter<"Recruitment"> | string
  slug?: Prisma.StringFilter<"Recruitment"> | string
  description?: Prisma.StringNullableFilter<"Recruitment"> | string | null
  requirements?: Prisma.StringFilter<"Recruitment"> | string
  deadline?: Prisma.DateTimeFilter<"Recruitment"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Recruitment"> | Date | string
  applications?: Prisma.RecruitmentApplicationListRelationFilter
}

export type RecruitmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  applications?: Prisma.RecruitmentApplicationOrderByRelationAggregateInput
}

export type RecruitmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  jobTitle?: string
  slug?: string
  AND?: Prisma.RecruitmentWhereInput | Prisma.RecruitmentWhereInput[]
  OR?: Prisma.RecruitmentWhereInput[]
  NOT?: Prisma.RecruitmentWhereInput | Prisma.RecruitmentWhereInput[]
  description?: Prisma.StringNullableFilter<"Recruitment"> | string | null
  requirements?: Prisma.StringFilter<"Recruitment"> | string
  deadline?: Prisma.DateTimeFilter<"Recruitment"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Recruitment"> | Date | string
  applications?: Prisma.RecruitmentApplicationListRelationFilter
}, "id" | "id" | "jobTitle" | "slug">

export type RecruitmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.RecruitmentCountOrderByAggregateInput
  _max?: Prisma.RecruitmentMaxOrderByAggregateInput
  _min?: Prisma.RecruitmentMinOrderByAggregateInput
}

export type RecruitmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.RecruitmentScalarWhereWithAggregatesInput | Prisma.RecruitmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.RecruitmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RecruitmentScalarWhereWithAggregatesInput | Prisma.RecruitmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Recruitment"> | string
  jobTitle?: Prisma.StringWithAggregatesFilter<"Recruitment"> | string
  slug?: Prisma.StringWithAggregatesFilter<"Recruitment"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Recruitment"> | string | null
  requirements?: Prisma.StringWithAggregatesFilter<"Recruitment"> | string
  deadline?: Prisma.DateTimeWithAggregatesFilter<"Recruitment"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Recruitment"> | Date | string
}

export type RecruitmentCreateInput = {
  id?: string
  jobTitle: string
  slug: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
  applications?: Prisma.RecruitmentApplicationCreateNestedManyWithoutRecruitmentInput
}

export type RecruitmentUncheckedCreateInput = {
  id?: string
  jobTitle: string
  slug: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
  applications?: Prisma.RecruitmentApplicationUncheckedCreateNestedManyWithoutRecruitmentInput
}

export type RecruitmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applications?: Prisma.RecruitmentApplicationUpdateManyWithoutRecruitmentNestedInput
}

export type RecruitmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applications?: Prisma.RecruitmentApplicationUncheckedUpdateManyWithoutRecruitmentNestedInput
}

export type RecruitmentCreateManyInput = {
  id?: string
  jobTitle: string
  slug: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
}

export type RecruitmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RecruitmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RecruitmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type RecruitmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type RecruitmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  description?: Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type RecruitmentScalarRelationFilter = {
  is?: Prisma.RecruitmentWhereInput
  isNot?: Prisma.RecruitmentWhereInput
}

export type RecruitmentCreateNestedOneWithoutApplicationsInput = {
  create?: Prisma.XOR<Prisma.RecruitmentCreateWithoutApplicationsInput, Prisma.RecruitmentUncheckedCreateWithoutApplicationsInput>
  connectOrCreate?: Prisma.RecruitmentCreateOrConnectWithoutApplicationsInput
  connect?: Prisma.RecruitmentWhereUniqueInput
}

export type RecruitmentUpdateOneRequiredWithoutApplicationsNestedInput = {
  create?: Prisma.XOR<Prisma.RecruitmentCreateWithoutApplicationsInput, Prisma.RecruitmentUncheckedCreateWithoutApplicationsInput>
  connectOrCreate?: Prisma.RecruitmentCreateOrConnectWithoutApplicationsInput
  upsert?: Prisma.RecruitmentUpsertWithoutApplicationsInput
  connect?: Prisma.RecruitmentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RecruitmentUpdateToOneWithWhereWithoutApplicationsInput, Prisma.RecruitmentUpdateWithoutApplicationsInput>, Prisma.RecruitmentUncheckedUpdateWithoutApplicationsInput>
}

export type RecruitmentCreateWithoutApplicationsInput = {
  id?: string
  jobTitle: string
  slug: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
}

export type RecruitmentUncheckedCreateWithoutApplicationsInput = {
  id?: string
  jobTitle: string
  slug: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
}

export type RecruitmentCreateOrConnectWithoutApplicationsInput = {
  where: Prisma.RecruitmentWhereUniqueInput
  create: Prisma.XOR<Prisma.RecruitmentCreateWithoutApplicationsInput, Prisma.RecruitmentUncheckedCreateWithoutApplicationsInput>
}

export type RecruitmentUpsertWithoutApplicationsInput = {
  update: Prisma.XOR<Prisma.RecruitmentUpdateWithoutApplicationsInput, Prisma.RecruitmentUncheckedUpdateWithoutApplicationsInput>
  create: Prisma.XOR<Prisma.RecruitmentCreateWithoutApplicationsInput, Prisma.RecruitmentUncheckedCreateWithoutApplicationsInput>
  where?: Prisma.RecruitmentWhereInput
}

export type RecruitmentUpdateToOneWithWhereWithoutApplicationsInput = {
  where?: Prisma.RecruitmentWhereInput
  data: Prisma.XOR<Prisma.RecruitmentUpdateWithoutApplicationsInput, Prisma.RecruitmentUncheckedUpdateWithoutApplicationsInput>
}

export type RecruitmentUpdateWithoutApplicationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RecruitmentUncheckedUpdateWithoutApplicationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type RecruitmentCountOutputType
 */

export type RecruitmentCountOutputType = {
  applications: number
}

export type RecruitmentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applications?: boolean | RecruitmentCountOutputTypeCountApplicationsArgs
}

/**
 * RecruitmentCountOutputType without action
 */
export type RecruitmentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecruitmentCountOutputType
   */
  select?: Prisma.RecruitmentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * RecruitmentCountOutputType without action
 */
export type RecruitmentCountOutputTypeCountApplicationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RecruitmentApplicationWhereInput
}


export type RecruitmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jobTitle?: boolean
  slug?: boolean
  description?: boolean
  requirements?: boolean
  deadline?: boolean
  createdAt?: boolean
  applications?: boolean | Prisma.Recruitment$applicationsArgs<ExtArgs>
  _count?: boolean | Prisma.RecruitmentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["recruitment"]>

export type RecruitmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jobTitle?: boolean
  slug?: boolean
  description?: boolean
  requirements?: boolean
  deadline?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["recruitment"]>

export type RecruitmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jobTitle?: boolean
  slug?: boolean
  description?: boolean
  requirements?: boolean
  deadline?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["recruitment"]>

export type RecruitmentSelectScalar = {
  id?: boolean
  jobTitle?: boolean
  slug?: boolean
  description?: boolean
  requirements?: boolean
  deadline?: boolean
  createdAt?: boolean
}

export type RecruitmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "jobTitle" | "slug" | "description" | "requirements" | "deadline" | "createdAt", ExtArgs["result"]["recruitment"]>
export type RecruitmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applications?: boolean | Prisma.Recruitment$applicationsArgs<ExtArgs>
  _count?: boolean | Prisma.RecruitmentCountOutputTypeDefaultArgs<ExtArgs>
}
export type RecruitmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type RecruitmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $RecruitmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Recruitment"
  objects: {
    applications: Prisma.$RecruitmentApplicationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    jobTitle: string
    slug: string
    description: string | null
    requirements: string
    deadline: Date
    createdAt: Date
  }, ExtArgs["result"]["recruitment"]>
  composites: {}
}

export type RecruitmentGetPayload<S extends boolean | null | undefined | RecruitmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload, S>

export type RecruitmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RecruitmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RecruitmentCountAggregateInputType | true
  }

export interface RecruitmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recruitment'], meta: { name: 'Recruitment' } }
  /**
   * Find zero or one Recruitment that matches the filter.
   * @param {RecruitmentFindUniqueArgs} args - Arguments to find a Recruitment
   * @example
   * // Get one Recruitment
   * const recruitment = await prisma.recruitment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RecruitmentFindUniqueArgs>(args: Prisma.SelectSubset<T, RecruitmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RecruitmentClient<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Recruitment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RecruitmentFindUniqueOrThrowArgs} args - Arguments to find a Recruitment
   * @example
   * // Get one Recruitment
   * const recruitment = await prisma.recruitment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RecruitmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RecruitmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RecruitmentClient<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Recruitment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecruitmentFindFirstArgs} args - Arguments to find a Recruitment
   * @example
   * // Get one Recruitment
   * const recruitment = await prisma.recruitment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RecruitmentFindFirstArgs>(args?: Prisma.SelectSubset<T, RecruitmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__RecruitmentClient<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Recruitment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecruitmentFindFirstOrThrowArgs} args - Arguments to find a Recruitment
   * @example
   * // Get one Recruitment
   * const recruitment = await prisma.recruitment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RecruitmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RecruitmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RecruitmentClient<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Recruitments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecruitmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Recruitments
   * const recruitments = await prisma.recruitment.findMany()
   * 
   * // Get first 10 Recruitments
   * const recruitments = await prisma.recruitment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const recruitmentWithIdOnly = await prisma.recruitment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RecruitmentFindManyArgs>(args?: Prisma.SelectSubset<T, RecruitmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Recruitment.
   * @param {RecruitmentCreateArgs} args - Arguments to create a Recruitment.
   * @example
   * // Create one Recruitment
   * const Recruitment = await prisma.recruitment.create({
   *   data: {
   *     // ... data to create a Recruitment
   *   }
   * })
   * 
   */
  create<T extends RecruitmentCreateArgs>(args: Prisma.SelectSubset<T, RecruitmentCreateArgs<ExtArgs>>): Prisma.Prisma__RecruitmentClient<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Recruitments.
   * @param {RecruitmentCreateManyArgs} args - Arguments to create many Recruitments.
   * @example
   * // Create many Recruitments
   * const recruitment = await prisma.recruitment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RecruitmentCreateManyArgs>(args?: Prisma.SelectSubset<T, RecruitmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Recruitments and returns the data saved in the database.
   * @param {RecruitmentCreateManyAndReturnArgs} args - Arguments to create many Recruitments.
   * @example
   * // Create many Recruitments
   * const recruitment = await prisma.recruitment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Recruitments and only return the `id`
   * const recruitmentWithIdOnly = await prisma.recruitment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RecruitmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RecruitmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Recruitment.
   * @param {RecruitmentDeleteArgs} args - Arguments to delete one Recruitment.
   * @example
   * // Delete one Recruitment
   * const Recruitment = await prisma.recruitment.delete({
   *   where: {
   *     // ... filter to delete one Recruitment
   *   }
   * })
   * 
   */
  delete<T extends RecruitmentDeleteArgs>(args: Prisma.SelectSubset<T, RecruitmentDeleteArgs<ExtArgs>>): Prisma.Prisma__RecruitmentClient<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Recruitment.
   * @param {RecruitmentUpdateArgs} args - Arguments to update one Recruitment.
   * @example
   * // Update one Recruitment
   * const recruitment = await prisma.recruitment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RecruitmentUpdateArgs>(args: Prisma.SelectSubset<T, RecruitmentUpdateArgs<ExtArgs>>): Prisma.Prisma__RecruitmentClient<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Recruitments.
   * @param {RecruitmentDeleteManyArgs} args - Arguments to filter Recruitments to delete.
   * @example
   * // Delete a few Recruitments
   * const { count } = await prisma.recruitment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RecruitmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, RecruitmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Recruitments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecruitmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Recruitments
   * const recruitment = await prisma.recruitment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RecruitmentUpdateManyArgs>(args: Prisma.SelectSubset<T, RecruitmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Recruitments and returns the data updated in the database.
   * @param {RecruitmentUpdateManyAndReturnArgs} args - Arguments to update many Recruitments.
   * @example
   * // Update many Recruitments
   * const recruitment = await prisma.recruitment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Recruitments and only return the `id`
   * const recruitmentWithIdOnly = await prisma.recruitment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RecruitmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RecruitmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Recruitment.
   * @param {RecruitmentUpsertArgs} args - Arguments to update or create a Recruitment.
   * @example
   * // Update or create a Recruitment
   * const recruitment = await prisma.recruitment.upsert({
   *   create: {
   *     // ... data to create a Recruitment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Recruitment we want to update
   *   }
   * })
   */
  upsert<T extends RecruitmentUpsertArgs>(args: Prisma.SelectSubset<T, RecruitmentUpsertArgs<ExtArgs>>): Prisma.Prisma__RecruitmentClient<runtime.Types.Result.GetResult<Prisma.$RecruitmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Recruitments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecruitmentCountArgs} args - Arguments to filter Recruitments to count.
   * @example
   * // Count the number of Recruitments
   * const count = await prisma.recruitment.count({
   *   where: {
   *     // ... the filter for the Recruitments we want to count
   *   }
   * })
  **/
  count<T extends RecruitmentCountArgs>(
    args?: Prisma.Subset<T, RecruitmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RecruitmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Recruitment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecruitmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RecruitmentAggregateArgs>(args: Prisma.Subset<T, RecruitmentAggregateArgs>): Prisma.PrismaPromise<GetRecruitmentAggregateType<T>>

  /**
   * Group by Recruitment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecruitmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RecruitmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RecruitmentGroupByArgs['orderBy'] }
      : { orderBy?: RecruitmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RecruitmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecruitmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Recruitment model
 */
readonly fields: RecruitmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Recruitment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RecruitmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  applications<T extends Prisma.Recruitment$applicationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Recruitment$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RecruitmentApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Recruitment model
 */
export interface RecruitmentFieldRefs {
  readonly id: Prisma.FieldRef<"Recruitment", 'String'>
  readonly jobTitle: Prisma.FieldRef<"Recruitment", 'String'>
  readonly slug: Prisma.FieldRef<"Recruitment", 'String'>
  readonly description: Prisma.FieldRef<"Recruitment", 'String'>
  readonly requirements: Prisma.FieldRef<"Recruitment", 'String'>
  readonly deadline: Prisma.FieldRef<"Recruitment", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Recruitment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Recruitment findUnique
 */
export type RecruitmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
  /**
   * Filter, which Recruitment to fetch.
   */
  where: Prisma.RecruitmentWhereUniqueInput
}

/**
 * Recruitment findUniqueOrThrow
 */
export type RecruitmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
  /**
   * Filter, which Recruitment to fetch.
   */
  where: Prisma.RecruitmentWhereUniqueInput
}

/**
 * Recruitment findFirst
 */
export type RecruitmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
  /**
   * Filter, which Recruitment to fetch.
   */
  where?: Prisma.RecruitmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Recruitments to fetch.
   */
  orderBy?: Prisma.RecruitmentOrderByWithRelationInput | Prisma.RecruitmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Recruitments.
   */
  cursor?: Prisma.RecruitmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Recruitments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Recruitments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Recruitments.
   */
  distinct?: Prisma.RecruitmentScalarFieldEnum | Prisma.RecruitmentScalarFieldEnum[]
}

/**
 * Recruitment findFirstOrThrow
 */
export type RecruitmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
  /**
   * Filter, which Recruitment to fetch.
   */
  where?: Prisma.RecruitmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Recruitments to fetch.
   */
  orderBy?: Prisma.RecruitmentOrderByWithRelationInput | Prisma.RecruitmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Recruitments.
   */
  cursor?: Prisma.RecruitmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Recruitments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Recruitments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Recruitments.
   */
  distinct?: Prisma.RecruitmentScalarFieldEnum | Prisma.RecruitmentScalarFieldEnum[]
}

/**
 * Recruitment findMany
 */
export type RecruitmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
  /**
   * Filter, which Recruitments to fetch.
   */
  where?: Prisma.RecruitmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Recruitments to fetch.
   */
  orderBy?: Prisma.RecruitmentOrderByWithRelationInput | Prisma.RecruitmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Recruitments.
   */
  cursor?: Prisma.RecruitmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Recruitments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Recruitments.
   */
  skip?: number
  distinct?: Prisma.RecruitmentScalarFieldEnum | Prisma.RecruitmentScalarFieldEnum[]
}

/**
 * Recruitment create
 */
export type RecruitmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
  /**
   * The data needed to create a Recruitment.
   */
  data: Prisma.XOR<Prisma.RecruitmentCreateInput, Prisma.RecruitmentUncheckedCreateInput>
}

/**
 * Recruitment createMany
 */
export type RecruitmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Recruitments.
   */
  data: Prisma.RecruitmentCreateManyInput | Prisma.RecruitmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Recruitment createManyAndReturn
 */
export type RecruitmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * The data used to create many Recruitments.
   */
  data: Prisma.RecruitmentCreateManyInput | Prisma.RecruitmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Recruitment update
 */
export type RecruitmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
  /**
   * The data needed to update a Recruitment.
   */
  data: Prisma.XOR<Prisma.RecruitmentUpdateInput, Prisma.RecruitmentUncheckedUpdateInput>
  /**
   * Choose, which Recruitment to update.
   */
  where: Prisma.RecruitmentWhereUniqueInput
}

/**
 * Recruitment updateMany
 */
export type RecruitmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Recruitments.
   */
  data: Prisma.XOR<Prisma.RecruitmentUpdateManyMutationInput, Prisma.RecruitmentUncheckedUpdateManyInput>
  /**
   * Filter which Recruitments to update
   */
  where?: Prisma.RecruitmentWhereInput
  /**
   * Limit how many Recruitments to update.
   */
  limit?: number
}

/**
 * Recruitment updateManyAndReturn
 */
export type RecruitmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * The data used to update Recruitments.
   */
  data: Prisma.XOR<Prisma.RecruitmentUpdateManyMutationInput, Prisma.RecruitmentUncheckedUpdateManyInput>
  /**
   * Filter which Recruitments to update
   */
  where?: Prisma.RecruitmentWhereInput
  /**
   * Limit how many Recruitments to update.
   */
  limit?: number
}

/**
 * Recruitment upsert
 */
export type RecruitmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
  /**
   * The filter to search for the Recruitment to update in case it exists.
   */
  where: Prisma.RecruitmentWhereUniqueInput
  /**
   * In case the Recruitment found by the `where` argument doesn't exist, create a new Recruitment with this data.
   */
  create: Prisma.XOR<Prisma.RecruitmentCreateInput, Prisma.RecruitmentUncheckedCreateInput>
  /**
   * In case the Recruitment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RecruitmentUpdateInput, Prisma.RecruitmentUncheckedUpdateInput>
}

/**
 * Recruitment delete
 */
export type RecruitmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
  /**
   * Filter which Recruitment to delete.
   */
  where: Prisma.RecruitmentWhereUniqueInput
}

/**
 * Recruitment deleteMany
 */
export type RecruitmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Recruitments to delete
   */
  where?: Prisma.RecruitmentWhereInput
  /**
   * Limit how many Recruitments to delete.
   */
  limit?: number
}

/**
 * Recruitment.applications
 */
export type Recruitment$applicationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecruitmentApplication
   */
  select?: Prisma.RecruitmentApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecruitmentApplication
   */
  omit?: Prisma.RecruitmentApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentApplicationInclude<ExtArgs> | null
  where?: Prisma.RecruitmentApplicationWhereInput
  orderBy?: Prisma.RecruitmentApplicationOrderByWithRelationInput | Prisma.RecruitmentApplicationOrderByWithRelationInput[]
  cursor?: Prisma.RecruitmentApplicationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RecruitmentApplicationScalarFieldEnum | Prisma.RecruitmentApplicationScalarFieldEnum[]
}

/**
 * Recruitment without action
 */
export type RecruitmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Recruitment
   */
  select?: Prisma.RecruitmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Recruitment
   */
  omit?: Prisma.RecruitmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecruitmentInclude<ExtArgs> | null
}
