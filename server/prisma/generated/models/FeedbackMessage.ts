
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FeedbackMessage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model FeedbackMessage
 * 
 */
export type FeedbackMessageModel = runtime.Types.Result.DefaultSelection<Prisma.$FeedbackMessagePayload>

export type AggregateFeedbackMessage = {
  _count: FeedbackMessageCountAggregateOutputType | null
  _min: FeedbackMessageMinAggregateOutputType | null
  _max: FeedbackMessageMaxAggregateOutputType | null
}

export type FeedbackMessageMinAggregateOutputType = {
  id: string | null
  senderId: string | null
  body: string | null
  createdAt: Date | null
  feedbackId: string | null
}

export type FeedbackMessageMaxAggregateOutputType = {
  id: string | null
  senderId: string | null
  body: string | null
  createdAt: Date | null
  feedbackId: string | null
}

export type FeedbackMessageCountAggregateOutputType = {
  id: number
  senderId: number
  body: number
  createdAt: number
  feedbackId: number
  _all: number
}


export type FeedbackMessageMinAggregateInputType = {
  id?: true
  senderId?: true
  body?: true
  createdAt?: true
  feedbackId?: true
}

export type FeedbackMessageMaxAggregateInputType = {
  id?: true
  senderId?: true
  body?: true
  createdAt?: true
  feedbackId?: true
}

export type FeedbackMessageCountAggregateInputType = {
  id?: true
  senderId?: true
  body?: true
  createdAt?: true
  feedbackId?: true
  _all?: true
}

export type FeedbackMessageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeedbackMessage to aggregate.
   */
  where?: Prisma.FeedbackMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackMessages to fetch.
   */
  orderBy?: Prisma.FeedbackMessageOrderByWithRelationInput | Prisma.FeedbackMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FeedbackMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FeedbackMessages
  **/
  _count?: true | FeedbackMessageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FeedbackMessageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FeedbackMessageMaxAggregateInputType
}

export type GetFeedbackMessageAggregateType<T extends FeedbackMessageAggregateArgs> = {
      [P in keyof T & keyof AggregateFeedbackMessage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeedbackMessage[P]>
    : Prisma.GetScalarType<T[P], AggregateFeedbackMessage[P]>
}




export type FeedbackMessageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeedbackMessageWhereInput
  orderBy?: Prisma.FeedbackMessageOrderByWithAggregationInput | Prisma.FeedbackMessageOrderByWithAggregationInput[]
  by: Prisma.FeedbackMessageScalarFieldEnum[] | Prisma.FeedbackMessageScalarFieldEnum
  having?: Prisma.FeedbackMessageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeedbackMessageCountAggregateInputType | true
  _min?: FeedbackMessageMinAggregateInputType
  _max?: FeedbackMessageMaxAggregateInputType
}

export type FeedbackMessageGroupByOutputType = {
  id: string
  senderId: string
  body: string
  createdAt: Date
  feedbackId: string
  _count: FeedbackMessageCountAggregateOutputType | null
  _min: FeedbackMessageMinAggregateOutputType | null
  _max: FeedbackMessageMaxAggregateOutputType | null
}

type GetFeedbackMessageGroupByPayload<T extends FeedbackMessageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FeedbackMessageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FeedbackMessageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeedbackMessageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeedbackMessageGroupByOutputType[P]>
      }
    >
  >



export type FeedbackMessageWhereInput = {
  AND?: Prisma.FeedbackMessageWhereInput | Prisma.FeedbackMessageWhereInput[]
  OR?: Prisma.FeedbackMessageWhereInput[]
  NOT?: Prisma.FeedbackMessageWhereInput | Prisma.FeedbackMessageWhereInput[]
  id?: Prisma.StringFilter<"FeedbackMessage"> | string
  senderId?: Prisma.StringFilter<"FeedbackMessage"> | string
  body?: Prisma.StringFilter<"FeedbackMessage"> | string
  createdAt?: Prisma.DateTimeFilter<"FeedbackMessage"> | Date | string
  feedbackId?: Prisma.StringFilter<"FeedbackMessage"> | string
  feedback?: Prisma.XOR<Prisma.FeedbackScalarRelationFilter, Prisma.FeedbackWhereInput>
}

export type FeedbackMessageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
  feedback?: Prisma.FeedbackOrderByWithRelationInput
}

export type FeedbackMessageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FeedbackMessageWhereInput | Prisma.FeedbackMessageWhereInput[]
  OR?: Prisma.FeedbackMessageWhereInput[]
  NOT?: Prisma.FeedbackMessageWhereInput | Prisma.FeedbackMessageWhereInput[]
  senderId?: Prisma.StringFilter<"FeedbackMessage"> | string
  body?: Prisma.StringFilter<"FeedbackMessage"> | string
  createdAt?: Prisma.DateTimeFilter<"FeedbackMessage"> | Date | string
  feedbackId?: Prisma.StringFilter<"FeedbackMessage"> | string
  feedback?: Prisma.XOR<Prisma.FeedbackScalarRelationFilter, Prisma.FeedbackWhereInput>
}, "id" | "id">

export type FeedbackMessageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
  _count?: Prisma.FeedbackMessageCountOrderByAggregateInput
  _max?: Prisma.FeedbackMessageMaxOrderByAggregateInput
  _min?: Prisma.FeedbackMessageMinOrderByAggregateInput
}

export type FeedbackMessageScalarWhereWithAggregatesInput = {
  AND?: Prisma.FeedbackMessageScalarWhereWithAggregatesInput | Prisma.FeedbackMessageScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeedbackMessageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FeedbackMessageScalarWhereWithAggregatesInput | Prisma.FeedbackMessageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FeedbackMessage"> | string
  senderId?: Prisma.StringWithAggregatesFilter<"FeedbackMessage"> | string
  body?: Prisma.StringWithAggregatesFilter<"FeedbackMessage"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FeedbackMessage"> | Date | string
  feedbackId?: Prisma.StringWithAggregatesFilter<"FeedbackMessage"> | string
}

export type FeedbackMessageCreateInput = {
  id?: string
  senderId: string
  body: string
  createdAt?: Date | string
  feedback: Prisma.FeedbackCreateNestedOneWithoutMessagesInput
}

export type FeedbackMessageUncheckedCreateInput = {
  id?: string
  senderId: string
  body: string
  createdAt?: Date | string
  feedbackId: string
}

export type FeedbackMessageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  feedback?: Prisma.FeedbackUpdateOneRequiredWithoutMessagesNestedInput
}

export type FeedbackMessageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  feedbackId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FeedbackMessageCreateManyInput = {
  id?: string
  senderId: string
  body: string
  createdAt?: Date | string
  feedbackId: string
}

export type FeedbackMessageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackMessageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  feedbackId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FeedbackMessageListRelationFilter = {
  every?: Prisma.FeedbackMessageWhereInput
  some?: Prisma.FeedbackMessageWhereInput
  none?: Prisma.FeedbackMessageWhereInput
}

export type FeedbackMessageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FeedbackMessageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
}

export type FeedbackMessageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
}

export type FeedbackMessageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
}

export type FeedbackMessageCreateNestedManyWithoutFeedbackInput = {
  create?: Prisma.XOR<Prisma.FeedbackMessageCreateWithoutFeedbackInput, Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput> | Prisma.FeedbackMessageCreateWithoutFeedbackInput[] | Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput[]
  connectOrCreate?: Prisma.FeedbackMessageCreateOrConnectWithoutFeedbackInput | Prisma.FeedbackMessageCreateOrConnectWithoutFeedbackInput[]
  createMany?: Prisma.FeedbackMessageCreateManyFeedbackInputEnvelope
  connect?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
}

export type FeedbackMessageUncheckedCreateNestedManyWithoutFeedbackInput = {
  create?: Prisma.XOR<Prisma.FeedbackMessageCreateWithoutFeedbackInput, Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput> | Prisma.FeedbackMessageCreateWithoutFeedbackInput[] | Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput[]
  connectOrCreate?: Prisma.FeedbackMessageCreateOrConnectWithoutFeedbackInput | Prisma.FeedbackMessageCreateOrConnectWithoutFeedbackInput[]
  createMany?: Prisma.FeedbackMessageCreateManyFeedbackInputEnvelope
  connect?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
}

export type FeedbackMessageUpdateManyWithoutFeedbackNestedInput = {
  create?: Prisma.XOR<Prisma.FeedbackMessageCreateWithoutFeedbackInput, Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput> | Prisma.FeedbackMessageCreateWithoutFeedbackInput[] | Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput[]
  connectOrCreate?: Prisma.FeedbackMessageCreateOrConnectWithoutFeedbackInput | Prisma.FeedbackMessageCreateOrConnectWithoutFeedbackInput[]
  upsert?: Prisma.FeedbackMessageUpsertWithWhereUniqueWithoutFeedbackInput | Prisma.FeedbackMessageUpsertWithWhereUniqueWithoutFeedbackInput[]
  createMany?: Prisma.FeedbackMessageCreateManyFeedbackInputEnvelope
  set?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
  disconnect?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
  delete?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
  connect?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
  update?: Prisma.FeedbackMessageUpdateWithWhereUniqueWithoutFeedbackInput | Prisma.FeedbackMessageUpdateWithWhereUniqueWithoutFeedbackInput[]
  updateMany?: Prisma.FeedbackMessageUpdateManyWithWhereWithoutFeedbackInput | Prisma.FeedbackMessageUpdateManyWithWhereWithoutFeedbackInput[]
  deleteMany?: Prisma.FeedbackMessageScalarWhereInput | Prisma.FeedbackMessageScalarWhereInput[]
}

export type FeedbackMessageUncheckedUpdateManyWithoutFeedbackNestedInput = {
  create?: Prisma.XOR<Prisma.FeedbackMessageCreateWithoutFeedbackInput, Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput> | Prisma.FeedbackMessageCreateWithoutFeedbackInput[] | Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput[]
  connectOrCreate?: Prisma.FeedbackMessageCreateOrConnectWithoutFeedbackInput | Prisma.FeedbackMessageCreateOrConnectWithoutFeedbackInput[]
  upsert?: Prisma.FeedbackMessageUpsertWithWhereUniqueWithoutFeedbackInput | Prisma.FeedbackMessageUpsertWithWhereUniqueWithoutFeedbackInput[]
  createMany?: Prisma.FeedbackMessageCreateManyFeedbackInputEnvelope
  set?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
  disconnect?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
  delete?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
  connect?: Prisma.FeedbackMessageWhereUniqueInput | Prisma.FeedbackMessageWhereUniqueInput[]
  update?: Prisma.FeedbackMessageUpdateWithWhereUniqueWithoutFeedbackInput | Prisma.FeedbackMessageUpdateWithWhereUniqueWithoutFeedbackInput[]
  updateMany?: Prisma.FeedbackMessageUpdateManyWithWhereWithoutFeedbackInput | Prisma.FeedbackMessageUpdateManyWithWhereWithoutFeedbackInput[]
  deleteMany?: Prisma.FeedbackMessageScalarWhereInput | Prisma.FeedbackMessageScalarWhereInput[]
}

export type FeedbackMessageCreateWithoutFeedbackInput = {
  id?: string
  senderId: string
  body: string
  createdAt?: Date | string
}

export type FeedbackMessageUncheckedCreateWithoutFeedbackInput = {
  id?: string
  senderId: string
  body: string
  createdAt?: Date | string
}

export type FeedbackMessageCreateOrConnectWithoutFeedbackInput = {
  where: Prisma.FeedbackMessageWhereUniqueInput
  create: Prisma.XOR<Prisma.FeedbackMessageCreateWithoutFeedbackInput, Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput>
}

export type FeedbackMessageCreateManyFeedbackInputEnvelope = {
  data: Prisma.FeedbackMessageCreateManyFeedbackInput | Prisma.FeedbackMessageCreateManyFeedbackInput[]
  skipDuplicates?: boolean
}

export type FeedbackMessageUpsertWithWhereUniqueWithoutFeedbackInput = {
  where: Prisma.FeedbackMessageWhereUniqueInput
  update: Prisma.XOR<Prisma.FeedbackMessageUpdateWithoutFeedbackInput, Prisma.FeedbackMessageUncheckedUpdateWithoutFeedbackInput>
  create: Prisma.XOR<Prisma.FeedbackMessageCreateWithoutFeedbackInput, Prisma.FeedbackMessageUncheckedCreateWithoutFeedbackInput>
}

export type FeedbackMessageUpdateWithWhereUniqueWithoutFeedbackInput = {
  where: Prisma.FeedbackMessageWhereUniqueInput
  data: Prisma.XOR<Prisma.FeedbackMessageUpdateWithoutFeedbackInput, Prisma.FeedbackMessageUncheckedUpdateWithoutFeedbackInput>
}

export type FeedbackMessageUpdateManyWithWhereWithoutFeedbackInput = {
  where: Prisma.FeedbackMessageScalarWhereInput
  data: Prisma.XOR<Prisma.FeedbackMessageUpdateManyMutationInput, Prisma.FeedbackMessageUncheckedUpdateManyWithoutFeedbackInput>
}

export type FeedbackMessageScalarWhereInput = {
  AND?: Prisma.FeedbackMessageScalarWhereInput | Prisma.FeedbackMessageScalarWhereInput[]
  OR?: Prisma.FeedbackMessageScalarWhereInput[]
  NOT?: Prisma.FeedbackMessageScalarWhereInput | Prisma.FeedbackMessageScalarWhereInput[]
  id?: Prisma.StringFilter<"FeedbackMessage"> | string
  senderId?: Prisma.StringFilter<"FeedbackMessage"> | string
  body?: Prisma.StringFilter<"FeedbackMessage"> | string
  createdAt?: Prisma.DateTimeFilter<"FeedbackMessage"> | Date | string
  feedbackId?: Prisma.StringFilter<"FeedbackMessage"> | string
}

export type FeedbackMessageCreateManyFeedbackInput = {
  id?: string
  senderId: string
  body: string
  createdAt?: Date | string
}

export type FeedbackMessageUpdateWithoutFeedbackInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackMessageUncheckedUpdateWithoutFeedbackInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackMessageUncheckedUpdateManyWithoutFeedbackInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FeedbackMessageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  senderId?: boolean
  body?: boolean
  createdAt?: boolean
  feedbackId?: boolean
  feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feedbackMessage"]>

export type FeedbackMessageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  senderId?: boolean
  body?: boolean
  createdAt?: boolean
  feedbackId?: boolean
  feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feedbackMessage"]>

export type FeedbackMessageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  senderId?: boolean
  body?: boolean
  createdAt?: boolean
  feedbackId?: boolean
  feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feedbackMessage"]>

export type FeedbackMessageSelectScalar = {
  id?: boolean
  senderId?: boolean
  body?: boolean
  createdAt?: boolean
  feedbackId?: boolean
}

export type FeedbackMessageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "senderId" | "body" | "createdAt" | "feedbackId", ExtArgs["result"]["feedbackMessage"]>
export type FeedbackMessageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
}
export type FeedbackMessageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
}
export type FeedbackMessageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
}

export type $FeedbackMessagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FeedbackMessage"
  objects: {
    feedback: Prisma.$FeedbackPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    senderId: string
    body: string
    createdAt: Date
    feedbackId: string
  }, ExtArgs["result"]["feedbackMessage"]>
  composites: {}
}

export type FeedbackMessageGetPayload<S extends boolean | null | undefined | FeedbackMessageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload, S>

export type FeedbackMessageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FeedbackMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FeedbackMessageCountAggregateInputType | true
  }

export interface FeedbackMessageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedbackMessage'], meta: { name: 'FeedbackMessage' } }
  /**
   * Find zero or one FeedbackMessage that matches the filter.
   * @param {FeedbackMessageFindUniqueArgs} args - Arguments to find a FeedbackMessage
   * @example
   * // Get one FeedbackMessage
   * const feedbackMessage = await prisma.feedbackMessage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeedbackMessageFindUniqueArgs>(args: Prisma.SelectSubset<T, FeedbackMessageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FeedbackMessageClient<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FeedbackMessage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeedbackMessageFindUniqueOrThrowArgs} args - Arguments to find a FeedbackMessage
   * @example
   * // Get one FeedbackMessage
   * const feedbackMessage = await prisma.feedbackMessage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeedbackMessageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FeedbackMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeedbackMessageClient<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeedbackMessage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackMessageFindFirstArgs} args - Arguments to find a FeedbackMessage
   * @example
   * // Get one FeedbackMessage
   * const feedbackMessage = await prisma.feedbackMessage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeedbackMessageFindFirstArgs>(args?: Prisma.SelectSubset<T, FeedbackMessageFindFirstArgs<ExtArgs>>): Prisma.Prisma__FeedbackMessageClient<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeedbackMessage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackMessageFindFirstOrThrowArgs} args - Arguments to find a FeedbackMessage
   * @example
   * // Get one FeedbackMessage
   * const feedbackMessage = await prisma.feedbackMessage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeedbackMessageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FeedbackMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeedbackMessageClient<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FeedbackMessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackMessageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FeedbackMessages
   * const feedbackMessages = await prisma.feedbackMessage.findMany()
   * 
   * // Get first 10 FeedbackMessages
   * const feedbackMessages = await prisma.feedbackMessage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const feedbackMessageWithIdOnly = await prisma.feedbackMessage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FeedbackMessageFindManyArgs>(args?: Prisma.SelectSubset<T, FeedbackMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FeedbackMessage.
   * @param {FeedbackMessageCreateArgs} args - Arguments to create a FeedbackMessage.
   * @example
   * // Create one FeedbackMessage
   * const FeedbackMessage = await prisma.feedbackMessage.create({
   *   data: {
   *     // ... data to create a FeedbackMessage
   *   }
   * })
   * 
   */
  create<T extends FeedbackMessageCreateArgs>(args: Prisma.SelectSubset<T, FeedbackMessageCreateArgs<ExtArgs>>): Prisma.Prisma__FeedbackMessageClient<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FeedbackMessages.
   * @param {FeedbackMessageCreateManyArgs} args - Arguments to create many FeedbackMessages.
   * @example
   * // Create many FeedbackMessages
   * const feedbackMessage = await prisma.feedbackMessage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FeedbackMessageCreateManyArgs>(args?: Prisma.SelectSubset<T, FeedbackMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FeedbackMessages and returns the data saved in the database.
   * @param {FeedbackMessageCreateManyAndReturnArgs} args - Arguments to create many FeedbackMessages.
   * @example
   * // Create many FeedbackMessages
   * const feedbackMessage = await prisma.feedbackMessage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FeedbackMessages and only return the `id`
   * const feedbackMessageWithIdOnly = await prisma.feedbackMessage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FeedbackMessageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FeedbackMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FeedbackMessage.
   * @param {FeedbackMessageDeleteArgs} args - Arguments to delete one FeedbackMessage.
   * @example
   * // Delete one FeedbackMessage
   * const FeedbackMessage = await prisma.feedbackMessage.delete({
   *   where: {
   *     // ... filter to delete one FeedbackMessage
   *   }
   * })
   * 
   */
  delete<T extends FeedbackMessageDeleteArgs>(args: Prisma.SelectSubset<T, FeedbackMessageDeleteArgs<ExtArgs>>): Prisma.Prisma__FeedbackMessageClient<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FeedbackMessage.
   * @param {FeedbackMessageUpdateArgs} args - Arguments to update one FeedbackMessage.
   * @example
   * // Update one FeedbackMessage
   * const feedbackMessage = await prisma.feedbackMessage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FeedbackMessageUpdateArgs>(args: Prisma.SelectSubset<T, FeedbackMessageUpdateArgs<ExtArgs>>): Prisma.Prisma__FeedbackMessageClient<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FeedbackMessages.
   * @param {FeedbackMessageDeleteManyArgs} args - Arguments to filter FeedbackMessages to delete.
   * @example
   * // Delete a few FeedbackMessages
   * const { count } = await prisma.feedbackMessage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FeedbackMessageDeleteManyArgs>(args?: Prisma.SelectSubset<T, FeedbackMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackMessageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FeedbackMessages
   * const feedbackMessage = await prisma.feedbackMessage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FeedbackMessageUpdateManyArgs>(args: Prisma.SelectSubset<T, FeedbackMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackMessages and returns the data updated in the database.
   * @param {FeedbackMessageUpdateManyAndReturnArgs} args - Arguments to update many FeedbackMessages.
   * @example
   * // Update many FeedbackMessages
   * const feedbackMessage = await prisma.feedbackMessage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FeedbackMessages and only return the `id`
   * const feedbackMessageWithIdOnly = await prisma.feedbackMessage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FeedbackMessageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FeedbackMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FeedbackMessage.
   * @param {FeedbackMessageUpsertArgs} args - Arguments to update or create a FeedbackMessage.
   * @example
   * // Update or create a FeedbackMessage
   * const feedbackMessage = await prisma.feedbackMessage.upsert({
   *   create: {
   *     // ... data to create a FeedbackMessage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FeedbackMessage we want to update
   *   }
   * })
   */
  upsert<T extends FeedbackMessageUpsertArgs>(args: Prisma.SelectSubset<T, FeedbackMessageUpsertArgs<ExtArgs>>): Prisma.Prisma__FeedbackMessageClient<runtime.Types.Result.GetResult<Prisma.$FeedbackMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FeedbackMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackMessageCountArgs} args - Arguments to filter FeedbackMessages to count.
   * @example
   * // Count the number of FeedbackMessages
   * const count = await prisma.feedbackMessage.count({
   *   where: {
   *     // ... the filter for the FeedbackMessages we want to count
   *   }
   * })
  **/
  count<T extends FeedbackMessageCountArgs>(
    args?: Prisma.Subset<T, FeedbackMessageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FeedbackMessageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FeedbackMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FeedbackMessageAggregateArgs>(args: Prisma.Subset<T, FeedbackMessageAggregateArgs>): Prisma.PrismaPromise<GetFeedbackMessageAggregateType<T>>

  /**
   * Group by FeedbackMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackMessageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FeedbackMessageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeedbackMessageGroupByArgs['orderBy'] }
      : { orderBy?: FeedbackMessageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FeedbackMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FeedbackMessage model
 */
readonly fields: FeedbackMessageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FeedbackMessage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeedbackMessageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  feedback<T extends Prisma.FeedbackDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FeedbackDefaultArgs<ExtArgs>>): Prisma.Prisma__FeedbackClient<runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FeedbackMessage model
 */
export interface FeedbackMessageFieldRefs {
  readonly id: Prisma.FieldRef<"FeedbackMessage", 'String'>
  readonly senderId: Prisma.FieldRef<"FeedbackMessage", 'String'>
  readonly body: Prisma.FieldRef<"FeedbackMessage", 'String'>
  readonly createdAt: Prisma.FieldRef<"FeedbackMessage", 'DateTime'>
  readonly feedbackId: Prisma.FieldRef<"FeedbackMessage", 'String'>
}
    

// Custom InputTypes
/**
 * FeedbackMessage findUnique
 */
export type FeedbackMessageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackMessage to fetch.
   */
  where: Prisma.FeedbackMessageWhereUniqueInput
}

/**
 * FeedbackMessage findUniqueOrThrow
 */
export type FeedbackMessageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackMessage to fetch.
   */
  where: Prisma.FeedbackMessageWhereUniqueInput
}

/**
 * FeedbackMessage findFirst
 */
export type FeedbackMessageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackMessage to fetch.
   */
  where?: Prisma.FeedbackMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackMessages to fetch.
   */
  orderBy?: Prisma.FeedbackMessageOrderByWithRelationInput | Prisma.FeedbackMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeedbackMessages.
   */
  cursor?: Prisma.FeedbackMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeedbackMessages.
   */
  distinct?: Prisma.FeedbackMessageScalarFieldEnum | Prisma.FeedbackMessageScalarFieldEnum[]
}

/**
 * FeedbackMessage findFirstOrThrow
 */
export type FeedbackMessageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackMessage to fetch.
   */
  where?: Prisma.FeedbackMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackMessages to fetch.
   */
  orderBy?: Prisma.FeedbackMessageOrderByWithRelationInput | Prisma.FeedbackMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeedbackMessages.
   */
  cursor?: Prisma.FeedbackMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeedbackMessages.
   */
  distinct?: Prisma.FeedbackMessageScalarFieldEnum | Prisma.FeedbackMessageScalarFieldEnum[]
}

/**
 * FeedbackMessage findMany
 */
export type FeedbackMessageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackMessages to fetch.
   */
  where?: Prisma.FeedbackMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackMessages to fetch.
   */
  orderBy?: Prisma.FeedbackMessageOrderByWithRelationInput | Prisma.FeedbackMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FeedbackMessages.
   */
  cursor?: Prisma.FeedbackMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackMessages.
   */
  skip?: number
  distinct?: Prisma.FeedbackMessageScalarFieldEnum | Prisma.FeedbackMessageScalarFieldEnum[]
}

/**
 * FeedbackMessage create
 */
export type FeedbackMessageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
  /**
   * The data needed to create a FeedbackMessage.
   */
  data: Prisma.XOR<Prisma.FeedbackMessageCreateInput, Prisma.FeedbackMessageUncheckedCreateInput>
}

/**
 * FeedbackMessage createMany
 */
export type FeedbackMessageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FeedbackMessages.
   */
  data: Prisma.FeedbackMessageCreateManyInput | Prisma.FeedbackMessageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeedbackMessage createManyAndReturn
 */
export type FeedbackMessageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * The data used to create many FeedbackMessages.
   */
  data: Prisma.FeedbackMessageCreateManyInput | Prisma.FeedbackMessageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackMessage update
 */
export type FeedbackMessageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
  /**
   * The data needed to update a FeedbackMessage.
   */
  data: Prisma.XOR<Prisma.FeedbackMessageUpdateInput, Prisma.FeedbackMessageUncheckedUpdateInput>
  /**
   * Choose, which FeedbackMessage to update.
   */
  where: Prisma.FeedbackMessageWhereUniqueInput
}

/**
 * FeedbackMessage updateMany
 */
export type FeedbackMessageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FeedbackMessages.
   */
  data: Prisma.XOR<Prisma.FeedbackMessageUpdateManyMutationInput, Prisma.FeedbackMessageUncheckedUpdateManyInput>
  /**
   * Filter which FeedbackMessages to update
   */
  where?: Prisma.FeedbackMessageWhereInput
  /**
   * Limit how many FeedbackMessages to update.
   */
  limit?: number
}

/**
 * FeedbackMessage updateManyAndReturn
 */
export type FeedbackMessageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * The data used to update FeedbackMessages.
   */
  data: Prisma.XOR<Prisma.FeedbackMessageUpdateManyMutationInput, Prisma.FeedbackMessageUncheckedUpdateManyInput>
  /**
   * Filter which FeedbackMessages to update
   */
  where?: Prisma.FeedbackMessageWhereInput
  /**
   * Limit how many FeedbackMessages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackMessage upsert
 */
export type FeedbackMessageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
  /**
   * The filter to search for the FeedbackMessage to update in case it exists.
   */
  where: Prisma.FeedbackMessageWhereUniqueInput
  /**
   * In case the FeedbackMessage found by the `where` argument doesn't exist, create a new FeedbackMessage with this data.
   */
  create: Prisma.XOR<Prisma.FeedbackMessageCreateInput, Prisma.FeedbackMessageUncheckedCreateInput>
  /**
   * In case the FeedbackMessage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FeedbackMessageUpdateInput, Prisma.FeedbackMessageUncheckedUpdateInput>
}

/**
 * FeedbackMessage delete
 */
export type FeedbackMessageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
  /**
   * Filter which FeedbackMessage to delete.
   */
  where: Prisma.FeedbackMessageWhereUniqueInput
}

/**
 * FeedbackMessage deleteMany
 */
export type FeedbackMessageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeedbackMessages to delete
   */
  where?: Prisma.FeedbackMessageWhereInput
  /**
   * Limit how many FeedbackMessages to delete.
   */
  limit?: number
}

/**
 * FeedbackMessage without action
 */
export type FeedbackMessageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackMessage
   */
  select?: Prisma.FeedbackMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackMessage
   */
  omit?: Prisma.FeedbackMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackMessageInclude<ExtArgs> | null
}
