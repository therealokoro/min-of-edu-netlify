
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `StaffFolder` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model StaffFolder
 * 
 */
export type StaffFolderModel = runtime.Types.Result.DefaultSelection<Prisma.$StaffFolderPayload>

export type AggregateStaffFolder = {
  _count: StaffFolderCountAggregateOutputType | null
  _min: StaffFolderMinAggregateOutputType | null
  _max: StaffFolderMaxAggregateOutputType | null
}

export type StaffFolderMinAggregateOutputType = {
  id: string | null
  staffId: string | null
  createdAt: Date | null
}

export type StaffFolderMaxAggregateOutputType = {
  id: string | null
  staffId: string | null
  createdAt: Date | null
}

export type StaffFolderCountAggregateOutputType = {
  id: number
  staffId: number
  files: number
  createdAt: number
  _all: number
}


export type StaffFolderMinAggregateInputType = {
  id?: true
  staffId?: true
  createdAt?: true
}

export type StaffFolderMaxAggregateInputType = {
  id?: true
  staffId?: true
  createdAt?: true
}

export type StaffFolderCountAggregateInputType = {
  id?: true
  staffId?: true
  files?: true
  createdAt?: true
  _all?: true
}

export type StaffFolderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffFolder to aggregate.
   */
  where?: Prisma.StaffFolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffFolders to fetch.
   */
  orderBy?: Prisma.StaffFolderOrderByWithRelationInput | Prisma.StaffFolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StaffFolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffFolders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffFolders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StaffFolders
  **/
  _count?: true | StaffFolderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StaffFolderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StaffFolderMaxAggregateInputType
}

export type GetStaffFolderAggregateType<T extends StaffFolderAggregateArgs> = {
      [P in keyof T & keyof AggregateStaffFolder]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStaffFolder[P]>
    : Prisma.GetScalarType<T[P], AggregateStaffFolder[P]>
}




export type StaffFolderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StaffFolderWhereInput
  orderBy?: Prisma.StaffFolderOrderByWithAggregationInput | Prisma.StaffFolderOrderByWithAggregationInput[]
  by: Prisma.StaffFolderScalarFieldEnum[] | Prisma.StaffFolderScalarFieldEnum
  having?: Prisma.StaffFolderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StaffFolderCountAggregateInputType | true
  _min?: StaffFolderMinAggregateInputType
  _max?: StaffFolderMaxAggregateInputType
}

export type StaffFolderGroupByOutputType = {
  id: string
  staffId: string
  files: runtime.JsonValue
  createdAt: Date
  _count: StaffFolderCountAggregateOutputType | null
  _min: StaffFolderMinAggregateOutputType | null
  _max: StaffFolderMaxAggregateOutputType | null
}

type GetStaffFolderGroupByPayload<T extends StaffFolderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StaffFolderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StaffFolderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StaffFolderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StaffFolderGroupByOutputType[P]>
      }
    >
  >



export type StaffFolderWhereInput = {
  AND?: Prisma.StaffFolderWhereInput | Prisma.StaffFolderWhereInput[]
  OR?: Prisma.StaffFolderWhereInput[]
  NOT?: Prisma.StaffFolderWhereInput | Prisma.StaffFolderWhereInput[]
  id?: Prisma.StringFilter<"StaffFolder"> | string
  staffId?: Prisma.StringFilter<"StaffFolder"> | string
  files?: Prisma.JsonFilter<"StaffFolder">
  createdAt?: Prisma.DateTimeFilter<"StaffFolder"> | Date | string
  staff?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type StaffFolderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  files?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  staff?: Prisma.UserOrderByWithRelationInput
}

export type StaffFolderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  staffId?: string
  AND?: Prisma.StaffFolderWhereInput | Prisma.StaffFolderWhereInput[]
  OR?: Prisma.StaffFolderWhereInput[]
  NOT?: Prisma.StaffFolderWhereInput | Prisma.StaffFolderWhereInput[]
  files?: Prisma.JsonFilter<"StaffFolder">
  createdAt?: Prisma.DateTimeFilter<"StaffFolder"> | Date | string
  staff?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "id" | "staffId">

export type StaffFolderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  files?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.StaffFolderCountOrderByAggregateInput
  _max?: Prisma.StaffFolderMaxOrderByAggregateInput
  _min?: Prisma.StaffFolderMinOrderByAggregateInput
}

export type StaffFolderScalarWhereWithAggregatesInput = {
  AND?: Prisma.StaffFolderScalarWhereWithAggregatesInput | Prisma.StaffFolderScalarWhereWithAggregatesInput[]
  OR?: Prisma.StaffFolderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StaffFolderScalarWhereWithAggregatesInput | Prisma.StaffFolderScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StaffFolder"> | string
  staffId?: Prisma.StringWithAggregatesFilter<"StaffFolder"> | string
  files?: Prisma.JsonWithAggregatesFilter<"StaffFolder">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"StaffFolder"> | Date | string
}

export type StaffFolderCreateInput = {
  id?: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  staff: Prisma.UserCreateNestedOneWithoutStaffFolderInput
}

export type StaffFolderUncheckedCreateInput = {
  id?: string
  staffId: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type StaffFolderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  staff?: Prisma.UserUpdateOneRequiredWithoutStaffFolderNestedInput
}

export type StaffFolderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffFolderCreateManyInput = {
  id?: string
  staffId: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type StaffFolderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffFolderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffFolderNullableScalarRelationFilter = {
  is?: Prisma.StaffFolderWhereInput | null
  isNot?: Prisma.StaffFolderWhereInput | null
}

export type StaffFolderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  files?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StaffFolderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StaffFolderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StaffFolderCreateNestedOneWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.StaffFolderCreateWithoutStaffInput, Prisma.StaffFolderUncheckedCreateWithoutStaffInput>
  connectOrCreate?: Prisma.StaffFolderCreateOrConnectWithoutStaffInput
  connect?: Prisma.StaffFolderWhereUniqueInput
}

export type StaffFolderUncheckedCreateNestedOneWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.StaffFolderCreateWithoutStaffInput, Prisma.StaffFolderUncheckedCreateWithoutStaffInput>
  connectOrCreate?: Prisma.StaffFolderCreateOrConnectWithoutStaffInput
  connect?: Prisma.StaffFolderWhereUniqueInput
}

export type StaffFolderUpdateOneWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.StaffFolderCreateWithoutStaffInput, Prisma.StaffFolderUncheckedCreateWithoutStaffInput>
  connectOrCreate?: Prisma.StaffFolderCreateOrConnectWithoutStaffInput
  upsert?: Prisma.StaffFolderUpsertWithoutStaffInput
  disconnect?: Prisma.StaffFolderWhereInput | boolean
  delete?: Prisma.StaffFolderWhereInput | boolean
  connect?: Prisma.StaffFolderWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StaffFolderUpdateToOneWithWhereWithoutStaffInput, Prisma.StaffFolderUpdateWithoutStaffInput>, Prisma.StaffFolderUncheckedUpdateWithoutStaffInput>
}

export type StaffFolderUncheckedUpdateOneWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.StaffFolderCreateWithoutStaffInput, Prisma.StaffFolderUncheckedCreateWithoutStaffInput>
  connectOrCreate?: Prisma.StaffFolderCreateOrConnectWithoutStaffInput
  upsert?: Prisma.StaffFolderUpsertWithoutStaffInput
  disconnect?: Prisma.StaffFolderWhereInput | boolean
  delete?: Prisma.StaffFolderWhereInput | boolean
  connect?: Prisma.StaffFolderWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StaffFolderUpdateToOneWithWhereWithoutStaffInput, Prisma.StaffFolderUpdateWithoutStaffInput>, Prisma.StaffFolderUncheckedUpdateWithoutStaffInput>
}

export type StaffFolderCreateWithoutStaffInput = {
  id?: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type StaffFolderUncheckedCreateWithoutStaffInput = {
  id?: string
  files: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type StaffFolderCreateOrConnectWithoutStaffInput = {
  where: Prisma.StaffFolderWhereUniqueInput
  create: Prisma.XOR<Prisma.StaffFolderCreateWithoutStaffInput, Prisma.StaffFolderUncheckedCreateWithoutStaffInput>
}

export type StaffFolderUpsertWithoutStaffInput = {
  update: Prisma.XOR<Prisma.StaffFolderUpdateWithoutStaffInput, Prisma.StaffFolderUncheckedUpdateWithoutStaffInput>
  create: Prisma.XOR<Prisma.StaffFolderCreateWithoutStaffInput, Prisma.StaffFolderUncheckedCreateWithoutStaffInput>
  where?: Prisma.StaffFolderWhereInput
}

export type StaffFolderUpdateToOneWithWhereWithoutStaffInput = {
  where?: Prisma.StaffFolderWhereInput
  data: Prisma.XOR<Prisma.StaffFolderUpdateWithoutStaffInput, Prisma.StaffFolderUncheckedUpdateWithoutStaffInput>
}

export type StaffFolderUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffFolderUncheckedUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  files?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type StaffFolderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  staffId?: boolean
  files?: boolean
  createdAt?: boolean
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["staffFolder"]>

export type StaffFolderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  staffId?: boolean
  files?: boolean
  createdAt?: boolean
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["staffFolder"]>

export type StaffFolderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  staffId?: boolean
  files?: boolean
  createdAt?: boolean
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["staffFolder"]>

export type StaffFolderSelectScalar = {
  id?: boolean
  staffId?: boolean
  files?: boolean
  createdAt?: boolean
}

export type StaffFolderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "staffId" | "files" | "createdAt", ExtArgs["result"]["staffFolder"]>
export type StaffFolderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type StaffFolderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type StaffFolderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $StaffFolderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StaffFolder"
  objects: {
    staff: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    staffId: string
    files: runtime.JsonValue
    createdAt: Date
  }, ExtArgs["result"]["staffFolder"]>
  composites: {}
}

export type StaffFolderGetPayload<S extends boolean | null | undefined | StaffFolderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload, S>

export type StaffFolderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StaffFolderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StaffFolderCountAggregateInputType | true
  }

export interface StaffFolderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffFolder'], meta: { name: 'StaffFolder' } }
  /**
   * Find zero or one StaffFolder that matches the filter.
   * @param {StaffFolderFindUniqueArgs} args - Arguments to find a StaffFolder
   * @example
   * // Get one StaffFolder
   * const staffFolder = await prisma.staffFolder.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StaffFolderFindUniqueArgs>(args: Prisma.SelectSubset<T, StaffFolderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StaffFolderClient<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StaffFolder that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StaffFolderFindUniqueOrThrowArgs} args - Arguments to find a StaffFolder
   * @example
   * // Get one StaffFolder
   * const staffFolder = await prisma.staffFolder.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StaffFolderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StaffFolderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffFolderClient<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffFolder that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffFolderFindFirstArgs} args - Arguments to find a StaffFolder
   * @example
   * // Get one StaffFolder
   * const staffFolder = await prisma.staffFolder.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StaffFolderFindFirstArgs>(args?: Prisma.SelectSubset<T, StaffFolderFindFirstArgs<ExtArgs>>): Prisma.Prisma__StaffFolderClient<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffFolder that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffFolderFindFirstOrThrowArgs} args - Arguments to find a StaffFolder
   * @example
   * // Get one StaffFolder
   * const staffFolder = await prisma.staffFolder.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StaffFolderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StaffFolderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffFolderClient<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StaffFolders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffFolderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StaffFolders
   * const staffFolders = await prisma.staffFolder.findMany()
   * 
   * // Get first 10 StaffFolders
   * const staffFolders = await prisma.staffFolder.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const staffFolderWithIdOnly = await prisma.staffFolder.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StaffFolderFindManyArgs>(args?: Prisma.SelectSubset<T, StaffFolderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StaffFolder.
   * @param {StaffFolderCreateArgs} args - Arguments to create a StaffFolder.
   * @example
   * // Create one StaffFolder
   * const StaffFolder = await prisma.staffFolder.create({
   *   data: {
   *     // ... data to create a StaffFolder
   *   }
   * })
   * 
   */
  create<T extends StaffFolderCreateArgs>(args: Prisma.SelectSubset<T, StaffFolderCreateArgs<ExtArgs>>): Prisma.Prisma__StaffFolderClient<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StaffFolders.
   * @param {StaffFolderCreateManyArgs} args - Arguments to create many StaffFolders.
   * @example
   * // Create many StaffFolders
   * const staffFolder = await prisma.staffFolder.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StaffFolderCreateManyArgs>(args?: Prisma.SelectSubset<T, StaffFolderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StaffFolders and returns the data saved in the database.
   * @param {StaffFolderCreateManyAndReturnArgs} args - Arguments to create many StaffFolders.
   * @example
   * // Create many StaffFolders
   * const staffFolder = await prisma.staffFolder.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StaffFolders and only return the `id`
   * const staffFolderWithIdOnly = await prisma.staffFolder.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StaffFolderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StaffFolderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StaffFolder.
   * @param {StaffFolderDeleteArgs} args - Arguments to delete one StaffFolder.
   * @example
   * // Delete one StaffFolder
   * const StaffFolder = await prisma.staffFolder.delete({
   *   where: {
   *     // ... filter to delete one StaffFolder
   *   }
   * })
   * 
   */
  delete<T extends StaffFolderDeleteArgs>(args: Prisma.SelectSubset<T, StaffFolderDeleteArgs<ExtArgs>>): Prisma.Prisma__StaffFolderClient<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StaffFolder.
   * @param {StaffFolderUpdateArgs} args - Arguments to update one StaffFolder.
   * @example
   * // Update one StaffFolder
   * const staffFolder = await prisma.staffFolder.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StaffFolderUpdateArgs>(args: Prisma.SelectSubset<T, StaffFolderUpdateArgs<ExtArgs>>): Prisma.Prisma__StaffFolderClient<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StaffFolders.
   * @param {StaffFolderDeleteManyArgs} args - Arguments to filter StaffFolders to delete.
   * @example
   * // Delete a few StaffFolders
   * const { count } = await prisma.staffFolder.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StaffFolderDeleteManyArgs>(args?: Prisma.SelectSubset<T, StaffFolderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffFolders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffFolderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StaffFolders
   * const staffFolder = await prisma.staffFolder.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StaffFolderUpdateManyArgs>(args: Prisma.SelectSubset<T, StaffFolderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffFolders and returns the data updated in the database.
   * @param {StaffFolderUpdateManyAndReturnArgs} args - Arguments to update many StaffFolders.
   * @example
   * // Update many StaffFolders
   * const staffFolder = await prisma.staffFolder.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StaffFolders and only return the `id`
   * const staffFolderWithIdOnly = await prisma.staffFolder.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StaffFolderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StaffFolderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StaffFolder.
   * @param {StaffFolderUpsertArgs} args - Arguments to update or create a StaffFolder.
   * @example
   * // Update or create a StaffFolder
   * const staffFolder = await prisma.staffFolder.upsert({
   *   create: {
   *     // ... data to create a StaffFolder
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StaffFolder we want to update
   *   }
   * })
   */
  upsert<T extends StaffFolderUpsertArgs>(args: Prisma.SelectSubset<T, StaffFolderUpsertArgs<ExtArgs>>): Prisma.Prisma__StaffFolderClient<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StaffFolders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffFolderCountArgs} args - Arguments to filter StaffFolders to count.
   * @example
   * // Count the number of StaffFolders
   * const count = await prisma.staffFolder.count({
   *   where: {
   *     // ... the filter for the StaffFolders we want to count
   *   }
   * })
  **/
  count<T extends StaffFolderCountArgs>(
    args?: Prisma.Subset<T, StaffFolderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StaffFolderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StaffFolder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffFolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StaffFolderAggregateArgs>(args: Prisma.Subset<T, StaffFolderAggregateArgs>): Prisma.PrismaPromise<GetStaffFolderAggregateType<T>>

  /**
   * Group by StaffFolder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffFolderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StaffFolderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StaffFolderGroupByArgs['orderBy'] }
      : { orderBy?: StaffFolderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StaffFolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffFolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StaffFolder model
 */
readonly fields: StaffFolderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StaffFolder.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StaffFolderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  staff<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StaffFolder model
 */
export interface StaffFolderFieldRefs {
  readonly id: Prisma.FieldRef<"StaffFolder", 'String'>
  readonly staffId: Prisma.FieldRef<"StaffFolder", 'String'>
  readonly files: Prisma.FieldRef<"StaffFolder", 'Json'>
  readonly createdAt: Prisma.FieldRef<"StaffFolder", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StaffFolder findUnique
 */
export type StaffFolderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  /**
   * Filter, which StaffFolder to fetch.
   */
  where: Prisma.StaffFolderWhereUniqueInput
}

/**
 * StaffFolder findUniqueOrThrow
 */
export type StaffFolderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  /**
   * Filter, which StaffFolder to fetch.
   */
  where: Prisma.StaffFolderWhereUniqueInput
}

/**
 * StaffFolder findFirst
 */
export type StaffFolderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  /**
   * Filter, which StaffFolder to fetch.
   */
  where?: Prisma.StaffFolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffFolders to fetch.
   */
  orderBy?: Prisma.StaffFolderOrderByWithRelationInput | Prisma.StaffFolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffFolders.
   */
  cursor?: Prisma.StaffFolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffFolders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffFolders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffFolders.
   */
  distinct?: Prisma.StaffFolderScalarFieldEnum | Prisma.StaffFolderScalarFieldEnum[]
}

/**
 * StaffFolder findFirstOrThrow
 */
export type StaffFolderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  /**
   * Filter, which StaffFolder to fetch.
   */
  where?: Prisma.StaffFolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffFolders to fetch.
   */
  orderBy?: Prisma.StaffFolderOrderByWithRelationInput | Prisma.StaffFolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffFolders.
   */
  cursor?: Prisma.StaffFolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffFolders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffFolders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffFolders.
   */
  distinct?: Prisma.StaffFolderScalarFieldEnum | Prisma.StaffFolderScalarFieldEnum[]
}

/**
 * StaffFolder findMany
 */
export type StaffFolderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  /**
   * Filter, which StaffFolders to fetch.
   */
  where?: Prisma.StaffFolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffFolders to fetch.
   */
  orderBy?: Prisma.StaffFolderOrderByWithRelationInput | Prisma.StaffFolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StaffFolders.
   */
  cursor?: Prisma.StaffFolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffFolders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffFolders.
   */
  skip?: number
  distinct?: Prisma.StaffFolderScalarFieldEnum | Prisma.StaffFolderScalarFieldEnum[]
}

/**
 * StaffFolder create
 */
export type StaffFolderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  /**
   * The data needed to create a StaffFolder.
   */
  data: Prisma.XOR<Prisma.StaffFolderCreateInput, Prisma.StaffFolderUncheckedCreateInput>
}

/**
 * StaffFolder createMany
 */
export type StaffFolderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StaffFolders.
   */
  data: Prisma.StaffFolderCreateManyInput | Prisma.StaffFolderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StaffFolder createManyAndReturn
 */
export type StaffFolderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * The data used to create many StaffFolders.
   */
  data: Prisma.StaffFolderCreateManyInput | Prisma.StaffFolderCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * StaffFolder update
 */
export type StaffFolderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  /**
   * The data needed to update a StaffFolder.
   */
  data: Prisma.XOR<Prisma.StaffFolderUpdateInput, Prisma.StaffFolderUncheckedUpdateInput>
  /**
   * Choose, which StaffFolder to update.
   */
  where: Prisma.StaffFolderWhereUniqueInput
}

/**
 * StaffFolder updateMany
 */
export type StaffFolderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StaffFolders.
   */
  data: Prisma.XOR<Prisma.StaffFolderUpdateManyMutationInput, Prisma.StaffFolderUncheckedUpdateManyInput>
  /**
   * Filter which StaffFolders to update
   */
  where?: Prisma.StaffFolderWhereInput
  /**
   * Limit how many StaffFolders to update.
   */
  limit?: number
}

/**
 * StaffFolder updateManyAndReturn
 */
export type StaffFolderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * The data used to update StaffFolders.
   */
  data: Prisma.XOR<Prisma.StaffFolderUpdateManyMutationInput, Prisma.StaffFolderUncheckedUpdateManyInput>
  /**
   * Filter which StaffFolders to update
   */
  where?: Prisma.StaffFolderWhereInput
  /**
   * Limit how many StaffFolders to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * StaffFolder upsert
 */
export type StaffFolderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  /**
   * The filter to search for the StaffFolder to update in case it exists.
   */
  where: Prisma.StaffFolderWhereUniqueInput
  /**
   * In case the StaffFolder found by the `where` argument doesn't exist, create a new StaffFolder with this data.
   */
  create: Prisma.XOR<Prisma.StaffFolderCreateInput, Prisma.StaffFolderUncheckedCreateInput>
  /**
   * In case the StaffFolder was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StaffFolderUpdateInput, Prisma.StaffFolderUncheckedUpdateInput>
}

/**
 * StaffFolder delete
 */
export type StaffFolderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  /**
   * Filter which StaffFolder to delete.
   */
  where: Prisma.StaffFolderWhereUniqueInput
}

/**
 * StaffFolder deleteMany
 */
export type StaffFolderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffFolders to delete
   */
  where?: Prisma.StaffFolderWhereInput
  /**
   * Limit how many StaffFolders to delete.
   */
  limit?: number
}

/**
 * StaffFolder without action
 */
export type StaffFolderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
}
