
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `StaffProfile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model StaffProfile
 * 
 */
export type StaffProfileModel = runtime.Types.Result.DefaultSelection<Prisma.$StaffProfilePayload>

export type AggregateStaffProfile = {
  _count: StaffProfileCountAggregateOutputType | null
  _min: StaffProfileMinAggregateOutputType | null
  _max: StaffProfileMaxAggregateOutputType | null
}

export type StaffProfileMinAggregateOutputType = {
  id: string | null
  name: string | null
  position: string | null
  imgUrl: string | null
  createdAt: Date | null
}

export type StaffProfileMaxAggregateOutputType = {
  id: string | null
  name: string | null
  position: string | null
  imgUrl: string | null
  createdAt: Date | null
}

export type StaffProfileCountAggregateOutputType = {
  id: number
  name: number
  position: number
  imgUrl: number
  createdAt: number
  _all: number
}


export type StaffProfileMinAggregateInputType = {
  id?: true
  name?: true
  position?: true
  imgUrl?: true
  createdAt?: true
}

export type StaffProfileMaxAggregateInputType = {
  id?: true
  name?: true
  position?: true
  imgUrl?: true
  createdAt?: true
}

export type StaffProfileCountAggregateInputType = {
  id?: true
  name?: true
  position?: true
  imgUrl?: true
  createdAt?: true
  _all?: true
}

export type StaffProfileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffProfile to aggregate.
   */
  where?: Prisma.StaffProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffProfiles to fetch.
   */
  orderBy?: Prisma.StaffProfileOrderByWithRelationInput | Prisma.StaffProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StaffProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StaffProfiles
  **/
  _count?: true | StaffProfileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StaffProfileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StaffProfileMaxAggregateInputType
}

export type GetStaffProfileAggregateType<T extends StaffProfileAggregateArgs> = {
      [P in keyof T & keyof AggregateStaffProfile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStaffProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateStaffProfile[P]>
}




export type StaffProfileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StaffProfileWhereInput
  orderBy?: Prisma.StaffProfileOrderByWithAggregationInput | Prisma.StaffProfileOrderByWithAggregationInput[]
  by: Prisma.StaffProfileScalarFieldEnum[] | Prisma.StaffProfileScalarFieldEnum
  having?: Prisma.StaffProfileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StaffProfileCountAggregateInputType | true
  _min?: StaffProfileMinAggregateInputType
  _max?: StaffProfileMaxAggregateInputType
}

export type StaffProfileGroupByOutputType = {
  id: string
  name: string
  position: string
  imgUrl: string
  createdAt: Date
  _count: StaffProfileCountAggregateOutputType | null
  _min: StaffProfileMinAggregateOutputType | null
  _max: StaffProfileMaxAggregateOutputType | null
}

type GetStaffProfileGroupByPayload<T extends StaffProfileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StaffProfileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StaffProfileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StaffProfileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StaffProfileGroupByOutputType[P]>
      }
    >
  >



export type StaffProfileWhereInput = {
  AND?: Prisma.StaffProfileWhereInput | Prisma.StaffProfileWhereInput[]
  OR?: Prisma.StaffProfileWhereInput[]
  NOT?: Prisma.StaffProfileWhereInput | Prisma.StaffProfileWhereInput[]
  id?: Prisma.StringFilter<"StaffProfile"> | string
  name?: Prisma.StringFilter<"StaffProfile"> | string
  position?: Prisma.StringFilter<"StaffProfile"> | string
  imgUrl?: Prisma.StringFilter<"StaffProfile"> | string
  createdAt?: Prisma.DateTimeFilter<"StaffProfile"> | Date | string
}

export type StaffProfileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  position?: Prisma.SortOrder
  imgUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StaffProfileWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.StaffProfileWhereInput | Prisma.StaffProfileWhereInput[]
  OR?: Prisma.StaffProfileWhereInput[]
  NOT?: Prisma.StaffProfileWhereInput | Prisma.StaffProfileWhereInput[]
  name?: Prisma.StringFilter<"StaffProfile"> | string
  position?: Prisma.StringFilter<"StaffProfile"> | string
  imgUrl?: Prisma.StringFilter<"StaffProfile"> | string
  createdAt?: Prisma.DateTimeFilter<"StaffProfile"> | Date | string
}, "id" | "id">

export type StaffProfileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  position?: Prisma.SortOrder
  imgUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.StaffProfileCountOrderByAggregateInput
  _max?: Prisma.StaffProfileMaxOrderByAggregateInput
  _min?: Prisma.StaffProfileMinOrderByAggregateInput
}

export type StaffProfileScalarWhereWithAggregatesInput = {
  AND?: Prisma.StaffProfileScalarWhereWithAggregatesInput | Prisma.StaffProfileScalarWhereWithAggregatesInput[]
  OR?: Prisma.StaffProfileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StaffProfileScalarWhereWithAggregatesInput | Prisma.StaffProfileScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StaffProfile"> | string
  name?: Prisma.StringWithAggregatesFilter<"StaffProfile"> | string
  position?: Prisma.StringWithAggregatesFilter<"StaffProfile"> | string
  imgUrl?: Prisma.StringWithAggregatesFilter<"StaffProfile"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"StaffProfile"> | Date | string
}

export type StaffProfileCreateInput = {
  id?: string
  name: string
  position: string
  imgUrl: string
  createdAt?: Date | string
}

export type StaffProfileUncheckedCreateInput = {
  id?: string
  name: string
  position: string
  imgUrl: string
  createdAt?: Date | string
}

export type StaffProfileUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  imgUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffProfileUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  imgUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffProfileCreateManyInput = {
  id?: string
  name: string
  position: string
  imgUrl: string
  createdAt?: Date | string
}

export type StaffProfileUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  imgUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffProfileUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  imgUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StaffProfileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  position?: Prisma.SortOrder
  imgUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StaffProfileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  position?: Prisma.SortOrder
  imgUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StaffProfileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  position?: Prisma.SortOrder
  imgUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type StaffProfileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  position?: boolean
  imgUrl?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["staffProfile"]>

export type StaffProfileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  position?: boolean
  imgUrl?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["staffProfile"]>

export type StaffProfileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  position?: boolean
  imgUrl?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["staffProfile"]>

export type StaffProfileSelectScalar = {
  id?: boolean
  name?: boolean
  position?: boolean
  imgUrl?: boolean
  createdAt?: boolean
}

export type StaffProfileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "position" | "imgUrl" | "createdAt", ExtArgs["result"]["staffProfile"]>

export type $StaffProfilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StaffProfile"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    position: string
    imgUrl: string
    createdAt: Date
  }, ExtArgs["result"]["staffProfile"]>
  composites: {}
}

export type StaffProfileGetPayload<S extends boolean | null | undefined | StaffProfileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload, S>

export type StaffProfileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StaffProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StaffProfileCountAggregateInputType | true
  }

export interface StaffProfileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffProfile'], meta: { name: 'StaffProfile' } }
  /**
   * Find zero or one StaffProfile that matches the filter.
   * @param {StaffProfileFindUniqueArgs} args - Arguments to find a StaffProfile
   * @example
   * // Get one StaffProfile
   * const staffProfile = await prisma.staffProfile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StaffProfileFindUniqueArgs>(args: Prisma.SelectSubset<T, StaffProfileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StaffProfileClient<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StaffProfile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StaffProfileFindUniqueOrThrowArgs} args - Arguments to find a StaffProfile
   * @example
   * // Get one StaffProfile
   * const staffProfile = await prisma.staffProfile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StaffProfileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StaffProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffProfileClient<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffProfile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffProfileFindFirstArgs} args - Arguments to find a StaffProfile
   * @example
   * // Get one StaffProfile
   * const staffProfile = await prisma.staffProfile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StaffProfileFindFirstArgs>(args?: Prisma.SelectSubset<T, StaffProfileFindFirstArgs<ExtArgs>>): Prisma.Prisma__StaffProfileClient<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StaffProfile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffProfileFindFirstOrThrowArgs} args - Arguments to find a StaffProfile
   * @example
   * // Get one StaffProfile
   * const staffProfile = await prisma.staffProfile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StaffProfileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StaffProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StaffProfileClient<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StaffProfiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffProfileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StaffProfiles
   * const staffProfiles = await prisma.staffProfile.findMany()
   * 
   * // Get first 10 StaffProfiles
   * const staffProfiles = await prisma.staffProfile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const staffProfileWithIdOnly = await prisma.staffProfile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StaffProfileFindManyArgs>(args?: Prisma.SelectSubset<T, StaffProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StaffProfile.
   * @param {StaffProfileCreateArgs} args - Arguments to create a StaffProfile.
   * @example
   * // Create one StaffProfile
   * const StaffProfile = await prisma.staffProfile.create({
   *   data: {
   *     // ... data to create a StaffProfile
   *   }
   * })
   * 
   */
  create<T extends StaffProfileCreateArgs>(args: Prisma.SelectSubset<T, StaffProfileCreateArgs<ExtArgs>>): Prisma.Prisma__StaffProfileClient<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StaffProfiles.
   * @param {StaffProfileCreateManyArgs} args - Arguments to create many StaffProfiles.
   * @example
   * // Create many StaffProfiles
   * const staffProfile = await prisma.staffProfile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StaffProfileCreateManyArgs>(args?: Prisma.SelectSubset<T, StaffProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StaffProfiles and returns the data saved in the database.
   * @param {StaffProfileCreateManyAndReturnArgs} args - Arguments to create many StaffProfiles.
   * @example
   * // Create many StaffProfiles
   * const staffProfile = await prisma.staffProfile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StaffProfiles and only return the `id`
   * const staffProfileWithIdOnly = await prisma.staffProfile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StaffProfileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StaffProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StaffProfile.
   * @param {StaffProfileDeleteArgs} args - Arguments to delete one StaffProfile.
   * @example
   * // Delete one StaffProfile
   * const StaffProfile = await prisma.staffProfile.delete({
   *   where: {
   *     // ... filter to delete one StaffProfile
   *   }
   * })
   * 
   */
  delete<T extends StaffProfileDeleteArgs>(args: Prisma.SelectSubset<T, StaffProfileDeleteArgs<ExtArgs>>): Prisma.Prisma__StaffProfileClient<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StaffProfile.
   * @param {StaffProfileUpdateArgs} args - Arguments to update one StaffProfile.
   * @example
   * // Update one StaffProfile
   * const staffProfile = await prisma.staffProfile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StaffProfileUpdateArgs>(args: Prisma.SelectSubset<T, StaffProfileUpdateArgs<ExtArgs>>): Prisma.Prisma__StaffProfileClient<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StaffProfiles.
   * @param {StaffProfileDeleteManyArgs} args - Arguments to filter StaffProfiles to delete.
   * @example
   * // Delete a few StaffProfiles
   * const { count } = await prisma.staffProfile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StaffProfileDeleteManyArgs>(args?: Prisma.SelectSubset<T, StaffProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StaffProfiles
   * const staffProfile = await prisma.staffProfile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StaffProfileUpdateManyArgs>(args: Prisma.SelectSubset<T, StaffProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StaffProfiles and returns the data updated in the database.
   * @param {StaffProfileUpdateManyAndReturnArgs} args - Arguments to update many StaffProfiles.
   * @example
   * // Update many StaffProfiles
   * const staffProfile = await prisma.staffProfile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StaffProfiles and only return the `id`
   * const staffProfileWithIdOnly = await prisma.staffProfile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StaffProfileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StaffProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StaffProfile.
   * @param {StaffProfileUpsertArgs} args - Arguments to update or create a StaffProfile.
   * @example
   * // Update or create a StaffProfile
   * const staffProfile = await prisma.staffProfile.upsert({
   *   create: {
   *     // ... data to create a StaffProfile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StaffProfile we want to update
   *   }
   * })
   */
  upsert<T extends StaffProfileUpsertArgs>(args: Prisma.SelectSubset<T, StaffProfileUpsertArgs<ExtArgs>>): Prisma.Prisma__StaffProfileClient<runtime.Types.Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StaffProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffProfileCountArgs} args - Arguments to filter StaffProfiles to count.
   * @example
   * // Count the number of StaffProfiles
   * const count = await prisma.staffProfile.count({
   *   where: {
   *     // ... the filter for the StaffProfiles we want to count
   *   }
   * })
  **/
  count<T extends StaffProfileCountArgs>(
    args?: Prisma.Subset<T, StaffProfileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StaffProfileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StaffProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StaffProfileAggregateArgs>(args: Prisma.Subset<T, StaffProfileAggregateArgs>): Prisma.PrismaPromise<GetStaffProfileAggregateType<T>>

  /**
   * Group by StaffProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StaffProfileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StaffProfileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StaffProfileGroupByArgs['orderBy'] }
      : { orderBy?: StaffProfileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StaffProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StaffProfile model
 */
readonly fields: StaffProfileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StaffProfile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StaffProfileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StaffProfile model
 */
export interface StaffProfileFieldRefs {
  readonly id: Prisma.FieldRef<"StaffProfile", 'String'>
  readonly name: Prisma.FieldRef<"StaffProfile", 'String'>
  readonly position: Prisma.FieldRef<"StaffProfile", 'String'>
  readonly imgUrl: Prisma.FieldRef<"StaffProfile", 'String'>
  readonly createdAt: Prisma.FieldRef<"StaffProfile", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StaffProfile findUnique
 */
export type StaffProfileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * Filter, which StaffProfile to fetch.
   */
  where: Prisma.StaffProfileWhereUniqueInput
}

/**
 * StaffProfile findUniqueOrThrow
 */
export type StaffProfileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * Filter, which StaffProfile to fetch.
   */
  where: Prisma.StaffProfileWhereUniqueInput
}

/**
 * StaffProfile findFirst
 */
export type StaffProfileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * Filter, which StaffProfile to fetch.
   */
  where?: Prisma.StaffProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffProfiles to fetch.
   */
  orderBy?: Prisma.StaffProfileOrderByWithRelationInput | Prisma.StaffProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffProfiles.
   */
  cursor?: Prisma.StaffProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffProfiles.
   */
  distinct?: Prisma.StaffProfileScalarFieldEnum | Prisma.StaffProfileScalarFieldEnum[]
}

/**
 * StaffProfile findFirstOrThrow
 */
export type StaffProfileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * Filter, which StaffProfile to fetch.
   */
  where?: Prisma.StaffProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffProfiles to fetch.
   */
  orderBy?: Prisma.StaffProfileOrderByWithRelationInput | Prisma.StaffProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StaffProfiles.
   */
  cursor?: Prisma.StaffProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StaffProfiles.
   */
  distinct?: Prisma.StaffProfileScalarFieldEnum | Prisma.StaffProfileScalarFieldEnum[]
}

/**
 * StaffProfile findMany
 */
export type StaffProfileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * Filter, which StaffProfiles to fetch.
   */
  where?: Prisma.StaffProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StaffProfiles to fetch.
   */
  orderBy?: Prisma.StaffProfileOrderByWithRelationInput | Prisma.StaffProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StaffProfiles.
   */
  cursor?: Prisma.StaffProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StaffProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StaffProfiles.
   */
  skip?: number
  distinct?: Prisma.StaffProfileScalarFieldEnum | Prisma.StaffProfileScalarFieldEnum[]
}

/**
 * StaffProfile create
 */
export type StaffProfileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * The data needed to create a StaffProfile.
   */
  data: Prisma.XOR<Prisma.StaffProfileCreateInput, Prisma.StaffProfileUncheckedCreateInput>
}

/**
 * StaffProfile createMany
 */
export type StaffProfileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StaffProfiles.
   */
  data: Prisma.StaffProfileCreateManyInput | Prisma.StaffProfileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StaffProfile createManyAndReturn
 */
export type StaffProfileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * The data used to create many StaffProfiles.
   */
  data: Prisma.StaffProfileCreateManyInput | Prisma.StaffProfileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StaffProfile update
 */
export type StaffProfileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * The data needed to update a StaffProfile.
   */
  data: Prisma.XOR<Prisma.StaffProfileUpdateInput, Prisma.StaffProfileUncheckedUpdateInput>
  /**
   * Choose, which StaffProfile to update.
   */
  where: Prisma.StaffProfileWhereUniqueInput
}

/**
 * StaffProfile updateMany
 */
export type StaffProfileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StaffProfiles.
   */
  data: Prisma.XOR<Prisma.StaffProfileUpdateManyMutationInput, Prisma.StaffProfileUncheckedUpdateManyInput>
  /**
   * Filter which StaffProfiles to update
   */
  where?: Prisma.StaffProfileWhereInput
  /**
   * Limit how many StaffProfiles to update.
   */
  limit?: number
}

/**
 * StaffProfile updateManyAndReturn
 */
export type StaffProfileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * The data used to update StaffProfiles.
   */
  data: Prisma.XOR<Prisma.StaffProfileUpdateManyMutationInput, Prisma.StaffProfileUncheckedUpdateManyInput>
  /**
   * Filter which StaffProfiles to update
   */
  where?: Prisma.StaffProfileWhereInput
  /**
   * Limit how many StaffProfiles to update.
   */
  limit?: number
}

/**
 * StaffProfile upsert
 */
export type StaffProfileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * The filter to search for the StaffProfile to update in case it exists.
   */
  where: Prisma.StaffProfileWhereUniqueInput
  /**
   * In case the StaffProfile found by the `where` argument doesn't exist, create a new StaffProfile with this data.
   */
  create: Prisma.XOR<Prisma.StaffProfileCreateInput, Prisma.StaffProfileUncheckedCreateInput>
  /**
   * In case the StaffProfile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StaffProfileUpdateInput, Prisma.StaffProfileUncheckedUpdateInput>
}

/**
 * StaffProfile delete
 */
export type StaffProfileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
  /**
   * Filter which StaffProfile to delete.
   */
  where: Prisma.StaffProfileWhereUniqueInput
}

/**
 * StaffProfile deleteMany
 */
export type StaffProfileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StaffProfiles to delete
   */
  where?: Prisma.StaffProfileWhereInput
  /**
   * Limit how many StaffProfiles to delete.
   */
  limit?: number
}

/**
 * StaffProfile without action
 */
export type StaffProfileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffProfile
   */
  select?: Prisma.StaffProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffProfile
   */
  omit?: Prisma.StaffProfileOmit<ExtArgs> | null
}
