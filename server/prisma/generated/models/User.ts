
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `User` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model User
 * 
 */
export type UserModel = runtime.Types.Result.DefaultSelection<Prisma.$UserPayload>

export type AggregateUser = {
  _count: UserCountAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

export type UserMinAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
  phoneNumber: string | null
  role: string | null
  currentPostingId: string | null
  emailVerified: boolean | null
  image: string | null
  createdAt: Date | null
  updatedAt: Date | null
  twoFactorEnabled: boolean | null
}

export type UserMaxAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
  phoneNumber: string | null
  role: string | null
  currentPostingId: string | null
  emailVerified: boolean | null
  image: string | null
  createdAt: Date | null
  updatedAt: Date | null
  twoFactorEnabled: boolean | null
}

export type UserCountAggregateOutputType = {
  id: number
  name: number
  email: number
  phoneNumber: number
  role: number
  currentPostingId: number
  emailVerified: number
  image: number
  createdAt: number
  updatedAt: number
  twoFactorEnabled: number
  _all: number
}


export type UserMinAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phoneNumber?: true
  role?: true
  currentPostingId?: true
  emailVerified?: true
  image?: true
  createdAt?: true
  updatedAt?: true
  twoFactorEnabled?: true
}

export type UserMaxAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phoneNumber?: true
  role?: true
  currentPostingId?: true
  emailVerified?: true
  image?: true
  createdAt?: true
  updatedAt?: true
  twoFactorEnabled?: true
}

export type UserCountAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phoneNumber?: true
  role?: true
  currentPostingId?: true
  emailVerified?: true
  image?: true
  createdAt?: true
  updatedAt?: true
  twoFactorEnabled?: true
  _all?: true
}

export type UserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which User to aggregate.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Users
  **/
  _count?: true | UserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends UserAggregateArgs> = {
      [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUser[P]>
    : Prisma.GetScalarType<T[P], AggregateUser[P]>
}




export type UserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithAggregationInput | Prisma.UserOrderByWithAggregationInput[]
  by: Prisma.UserScalarFieldEnum[] | Prisma.UserScalarFieldEnum
  having?: Prisma.UserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserCountAggregateInputType | true
  _min?: UserMinAggregateInputType
  _max?: UserMaxAggregateInputType
}

export type UserGroupByOutputType = {
  id: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId: string | null
  emailVerified: boolean
  image: string | null
  createdAt: Date
  updatedAt: Date
  twoFactorEnabled: boolean
  _count: UserCountAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
      }
    >
  >



export type UserWhereInput = {
  AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  OR?: Prisma.UserWhereInput[]
  NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  id?: Prisma.StringFilter<"User"> | string
  name?: Prisma.StringFilter<"User"> | string
  email?: Prisma.StringFilter<"User"> | string
  phoneNumber?: Prisma.StringFilter<"User"> | string
  role?: Prisma.StringFilter<"User"> | string
  currentPostingId?: Prisma.StringNullableFilter<"User"> | string | null
  emailVerified?: Prisma.BoolFilter<"User"> | boolean
  image?: Prisma.StringNullableFilter<"User"> | string | null
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
  twoFactorEnabled?: Prisma.BoolFilter<"User"> | boolean
  screeningEntries?: Prisma.ScreeningEntryListRelationFilter
  postingHistory?: Prisma.PostingListRelationFilter
  staffFolder?: Prisma.XOR<Prisma.StaffFolderNullableScalarRelationFilter, Prisma.StaffFolderWhereInput> | null
  complains?: Prisma.FeedbackListRelationFilter
  feedbacks?: Prisma.FeedbackListRelationFilter
  Session?: Prisma.SessionListRelationFilter
  Account?: Prisma.AccountListRelationFilter
}

export type UserOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  role?: Prisma.SortOrder
  currentPostingId?: Prisma.SortOrderInput | Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  twoFactorEnabled?: Prisma.SortOrder
  screeningEntries?: Prisma.ScreeningEntryOrderByRelationAggregateInput
  postingHistory?: Prisma.PostingOrderByRelationAggregateInput
  staffFolder?: Prisma.StaffFolderOrderByWithRelationInput
  complains?: Prisma.FeedbackOrderByRelationAggregateInput
  feedbacks?: Prisma.FeedbackOrderByRelationAggregateInput
  Session?: Prisma.SessionOrderByRelationAggregateInput
  Account?: Prisma.AccountOrderByRelationAggregateInput
}

export type UserWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  OR?: Prisma.UserWhereInput[]
  NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  name?: Prisma.StringFilter<"User"> | string
  phoneNumber?: Prisma.StringFilter<"User"> | string
  role?: Prisma.StringFilter<"User"> | string
  currentPostingId?: Prisma.StringNullableFilter<"User"> | string | null
  emailVerified?: Prisma.BoolFilter<"User"> | boolean
  image?: Prisma.StringNullableFilter<"User"> | string | null
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
  twoFactorEnabled?: Prisma.BoolFilter<"User"> | boolean
  screeningEntries?: Prisma.ScreeningEntryListRelationFilter
  postingHistory?: Prisma.PostingListRelationFilter
  staffFolder?: Prisma.XOR<Prisma.StaffFolderNullableScalarRelationFilter, Prisma.StaffFolderWhereInput> | null
  complains?: Prisma.FeedbackListRelationFilter
  feedbacks?: Prisma.FeedbackListRelationFilter
  Session?: Prisma.SessionListRelationFilter
  Account?: Prisma.AccountListRelationFilter
}, "id" | "email">

export type UserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  role?: Prisma.SortOrder
  currentPostingId?: Prisma.SortOrderInput | Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  twoFactorEnabled?: Prisma.SortOrder
  _count?: Prisma.UserCountOrderByAggregateInput
  _max?: Prisma.UserMaxOrderByAggregateInput
  _min?: Prisma.UserMinOrderByAggregateInput
}

export type UserScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserScalarWhereWithAggregatesInput | Prisma.UserScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserScalarWhereWithAggregatesInput | Prisma.UserScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"User"> | string
  name?: Prisma.StringWithAggregatesFilter<"User"> | string
  email?: Prisma.StringWithAggregatesFilter<"User"> | string
  phoneNumber?: Prisma.StringWithAggregatesFilter<"User"> | string
  role?: Prisma.StringWithAggregatesFilter<"User"> | string
  currentPostingId?: Prisma.StringNullableWithAggregatesFilter<"User"> | string | null
  emailVerified?: Prisma.BoolWithAggregatesFilter<"User"> | boolean
  image?: Prisma.StringNullableWithAggregatesFilter<"User"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string
  twoFactorEnabled?: Prisma.BoolWithAggregatesFilter<"User"> | boolean
}

export type UserCreateInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingUncheckedCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderUncheckedCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackUncheckedCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput
}

export type UserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUncheckedUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUncheckedUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUncheckedUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateManyInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
}

export type UserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  role?: Prisma.SortOrder
  currentPostingId?: Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  image?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  twoFactorEnabled?: Prisma.SortOrder
}

export type UserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  role?: Prisma.SortOrder
  currentPostingId?: Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  image?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  twoFactorEnabled?: Prisma.SortOrder
}

export type UserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  role?: Prisma.SortOrder
  currentPostingId?: Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  image?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  twoFactorEnabled?: Prisma.SortOrder
}

export type UserScalarRelationFilter = {
  is?: Prisma.UserWhereInput
  isNot?: Prisma.UserWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type UserCreateNestedOneWithoutSessionInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutSessionInput, Prisma.UserUncheckedCreateWithoutSessionInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutSessionInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutSessionNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutSessionInput, Prisma.UserUncheckedCreateWithoutSessionInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutSessionInput
  upsert?: Prisma.UserUpsertWithoutSessionInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutSessionInput, Prisma.UserUpdateWithoutSessionInput>, Prisma.UserUncheckedUpdateWithoutSessionInput>
}

export type UserCreateNestedOneWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutAccountInput, Prisma.UserUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutAccountInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutAccountInput, Prisma.UserUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutAccountInput
  upsert?: Prisma.UserUpsertWithoutAccountInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutAccountInput, Prisma.UserUpdateWithoutAccountInput>, Prisma.UserUncheckedUpdateWithoutAccountInput>
}

export type UserCreateNestedOneWithoutScreeningEntriesInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutScreeningEntriesInput, Prisma.UserUncheckedCreateWithoutScreeningEntriesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutScreeningEntriesInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutScreeningEntriesNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutScreeningEntriesInput, Prisma.UserUncheckedCreateWithoutScreeningEntriesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutScreeningEntriesInput
  upsert?: Prisma.UserUpsertWithoutScreeningEntriesInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutScreeningEntriesInput, Prisma.UserUpdateWithoutScreeningEntriesInput>, Prisma.UserUncheckedUpdateWithoutScreeningEntriesInput>
}

export type UserCreateNestedOneWithoutPostingHistoryInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutPostingHistoryInput, Prisma.UserUncheckedCreateWithoutPostingHistoryInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutPostingHistoryInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutPostingHistoryNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutPostingHistoryInput, Prisma.UserUncheckedCreateWithoutPostingHistoryInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutPostingHistoryInput
  upsert?: Prisma.UserUpsertWithoutPostingHistoryInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutPostingHistoryInput, Prisma.UserUpdateWithoutPostingHistoryInput>, Prisma.UserUncheckedUpdateWithoutPostingHistoryInput>
}

export type UserCreateNestedOneWithoutStaffFolderInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutStaffFolderInput, Prisma.UserUncheckedCreateWithoutStaffFolderInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutStaffFolderInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutStaffFolderNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutStaffFolderInput, Prisma.UserUncheckedCreateWithoutStaffFolderInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutStaffFolderInput
  upsert?: Prisma.UserUpsertWithoutStaffFolderInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutStaffFolderInput, Prisma.UserUpdateWithoutStaffFolderInput>, Prisma.UserUncheckedUpdateWithoutStaffFolderInput>
}

export type UserCreateNestedOneWithoutComplainsInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutComplainsInput, Prisma.UserUncheckedCreateWithoutComplainsInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutComplainsInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserCreateNestedOneWithoutFeedbacksInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutFeedbacksInput, Prisma.UserUncheckedCreateWithoutFeedbacksInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutFeedbacksInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutComplainsNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutComplainsInput, Prisma.UserUncheckedCreateWithoutComplainsInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutComplainsInput
  upsert?: Prisma.UserUpsertWithoutComplainsInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutComplainsInput, Prisma.UserUpdateWithoutComplainsInput>, Prisma.UserUncheckedUpdateWithoutComplainsInput>
}

export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutFeedbacksInput, Prisma.UserUncheckedCreateWithoutFeedbacksInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutFeedbacksInput
  upsert?: Prisma.UserUpsertWithoutFeedbacksInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutFeedbacksInput, Prisma.UserUpdateWithoutFeedbacksInput>, Prisma.UserUncheckedUpdateWithoutFeedbacksInput>
}

export type UserCreateWithoutSessionInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutAdminInput
  Account?: Prisma.AccountCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutSessionInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingUncheckedCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderUncheckedCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackUncheckedCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutAdminInput
  Account?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutSessionInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutSessionInput, Prisma.UserUncheckedCreateWithoutSessionInput>
}

export type UserUpsertWithoutSessionInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutSessionInput, Prisma.UserUncheckedUpdateWithoutSessionInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutSessionInput, Prisma.UserUncheckedCreateWithoutSessionInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutSessionInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutSessionInput, Prisma.UserUncheckedUpdateWithoutSessionInput>
}

export type UserUpdateWithoutSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUpdateManyWithoutAdminNestedInput
  Account?: Prisma.AccountUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUncheckedUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUncheckedUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUncheckedUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutAdminNestedInput
  Account?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateWithoutAccountInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutAccountInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingUncheckedCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderUncheckedCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackUncheckedCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutAccountInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutAccountInput, Prisma.UserUncheckedCreateWithoutAccountInput>
}

export type UserUpsertWithoutAccountInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutAccountInput, Prisma.UserUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutAccountInput, Prisma.UserUncheckedCreateWithoutAccountInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutAccountInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutAccountInput, Prisma.UserUncheckedUpdateWithoutAccountInput>
}

export type UserUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUncheckedUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUncheckedUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUncheckedUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateWithoutScreeningEntriesInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  postingHistory?: Prisma.PostingCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutScreeningEntriesInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  postingHistory?: Prisma.PostingUncheckedCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderUncheckedCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackUncheckedCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutScreeningEntriesInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutScreeningEntriesInput, Prisma.UserUncheckedCreateWithoutScreeningEntriesInput>
}

export type UserUpsertWithoutScreeningEntriesInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutScreeningEntriesInput, Prisma.UserUncheckedUpdateWithoutScreeningEntriesInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutScreeningEntriesInput, Prisma.UserUncheckedCreateWithoutScreeningEntriesInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutScreeningEntriesInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutScreeningEntriesInput, Prisma.UserUncheckedUpdateWithoutScreeningEntriesInput>
}

export type UserUpdateWithoutScreeningEntriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  postingHistory?: Prisma.PostingUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutScreeningEntriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  postingHistory?: Prisma.PostingUncheckedUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUncheckedUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUncheckedUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateWithoutPostingHistoryInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutPostingHistoryInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderUncheckedCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackUncheckedCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutPostingHistoryInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutPostingHistoryInput, Prisma.UserUncheckedCreateWithoutPostingHistoryInput>
}

export type UserUpsertWithoutPostingHistoryInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutPostingHistoryInput, Prisma.UserUncheckedUpdateWithoutPostingHistoryInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutPostingHistoryInput, Prisma.UserUncheckedCreateWithoutPostingHistoryInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutPostingHistoryInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutPostingHistoryInput, Prisma.UserUncheckedUpdateWithoutPostingHistoryInput>
}

export type UserUpdateWithoutPostingHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutPostingHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUncheckedUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUncheckedUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateWithoutStaffFolderInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingCreateNestedManyWithoutStaffInput
  complains?: Prisma.FeedbackCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutStaffFolderInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingUncheckedCreateNestedManyWithoutStaffInput
  complains?: Prisma.FeedbackUncheckedCreateNestedManyWithoutStaffInput
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutStaffFolderInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutStaffFolderInput, Prisma.UserUncheckedCreateWithoutStaffFolderInput>
}

export type UserUpsertWithoutStaffFolderInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutStaffFolderInput, Prisma.UserUncheckedUpdateWithoutStaffFolderInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutStaffFolderInput, Prisma.UserUncheckedCreateWithoutStaffFolderInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutStaffFolderInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutStaffFolderInput, Prisma.UserUncheckedUpdateWithoutStaffFolderInput>
}

export type UserUpdateWithoutStaffFolderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUpdateManyWithoutStaffNestedInput
  complains?: Prisma.FeedbackUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutStaffFolderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUncheckedUpdateManyWithoutStaffNestedInput
  complains?: Prisma.FeedbackUncheckedUpdateManyWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateWithoutComplainsInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderCreateNestedOneWithoutStaffInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutComplainsInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingUncheckedCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderUncheckedCreateNestedOneWithoutStaffInput
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutAdminInput
  Session?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutComplainsInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutComplainsInput, Prisma.UserUncheckedCreateWithoutComplainsInput>
}

export type UserCreateWithoutFeedbacksInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackCreateNestedManyWithoutStaffInput
  Session?: Prisma.SessionCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutFeedbacksInput = {
  id?: string
  name: string
  email: string
  phoneNumber: string
  role: string
  currentPostingId?: string | null
  emailVerified?: boolean
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  twoFactorEnabled?: boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedCreateNestedManyWithoutStaffInput
  postingHistory?: Prisma.PostingUncheckedCreateNestedManyWithoutStaffInput
  staffFolder?: Prisma.StaffFolderUncheckedCreateNestedOneWithoutStaffInput
  complains?: Prisma.FeedbackUncheckedCreateNestedManyWithoutStaffInput
  Session?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput
  Account?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutFeedbacksInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutFeedbacksInput, Prisma.UserUncheckedCreateWithoutFeedbacksInput>
}

export type UserUpsertWithoutComplainsInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutComplainsInput, Prisma.UserUncheckedUpdateWithoutComplainsInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutComplainsInput, Prisma.UserUncheckedCreateWithoutComplainsInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutComplainsInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutComplainsInput, Prisma.UserUncheckedUpdateWithoutComplainsInput>
}

export type UserUpdateWithoutComplainsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUpdateOneWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutComplainsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUncheckedUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUncheckedUpdateOneWithoutStaffNestedInput
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutAdminNestedInput
  Session?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput
}

export type UserUpsertWithoutFeedbacksInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutFeedbacksInput, Prisma.UserUncheckedUpdateWithoutFeedbacksInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutFeedbacksInput, Prisma.UserUncheckedCreateWithoutFeedbacksInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutFeedbacksInput, Prisma.UserUncheckedUpdateWithoutFeedbacksInput>
}

export type UserUpdateWithoutFeedbacksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUpdateManyWithoutStaffNestedInput
  Session?: Prisma.SessionUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutFeedbacksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  currentPostingId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  twoFactorEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  screeningEntries?: Prisma.ScreeningEntryUncheckedUpdateManyWithoutStaffNestedInput
  postingHistory?: Prisma.PostingUncheckedUpdateManyWithoutStaffNestedInput
  staffFolder?: Prisma.StaffFolderUncheckedUpdateOneWithoutStaffNestedInput
  complains?: Prisma.FeedbackUncheckedUpdateManyWithoutStaffNestedInput
  Session?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput
  Account?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput
}


/**
 * Count Type UserCountOutputType
 */

export type UserCountOutputType = {
  screeningEntries: number
  postingHistory: number
  complains: number
  feedbacks: number
  Session: number
  Account: number
}

export type UserCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  screeningEntries?: boolean | UserCountOutputTypeCountScreeningEntriesArgs
  postingHistory?: boolean | UserCountOutputTypeCountPostingHistoryArgs
  complains?: boolean | UserCountOutputTypeCountComplainsArgs
  feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
  Session?: boolean | UserCountOutputTypeCountSessionArgs
  Account?: boolean | UserCountOutputTypeCountAccountArgs
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCountOutputType
   */
  select?: Prisma.UserCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountScreeningEntriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScreeningEntryWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountPostingHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostingWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountComplainsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeedbackWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeedbackWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SessionWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountAccountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AccountWhereInput
}


export type UserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phoneNumber?: boolean
  role?: boolean
  currentPostingId?: boolean
  emailVerified?: boolean
  image?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  twoFactorEnabled?: boolean
  screeningEntries?: boolean | Prisma.User$screeningEntriesArgs<ExtArgs>
  postingHistory?: boolean | Prisma.User$postingHistoryArgs<ExtArgs>
  staffFolder?: boolean | Prisma.User$staffFolderArgs<ExtArgs>
  complains?: boolean | Prisma.User$complainsArgs<ExtArgs>
  feedbacks?: boolean | Prisma.User$feedbacksArgs<ExtArgs>
  Session?: boolean | Prisma.User$SessionArgs<ExtArgs>
  Account?: boolean | Prisma.User$AccountArgs<ExtArgs>
  _count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["user"]>

export type UserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phoneNumber?: boolean
  role?: boolean
  currentPostingId?: boolean
  emailVerified?: boolean
  image?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  twoFactorEnabled?: boolean
}, ExtArgs["result"]["user"]>

export type UserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phoneNumber?: boolean
  role?: boolean
  currentPostingId?: boolean
  emailVerified?: boolean
  image?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  twoFactorEnabled?: boolean
}, ExtArgs["result"]["user"]>

export type UserSelectScalar = {
  id?: boolean
  name?: boolean
  email?: boolean
  phoneNumber?: boolean
  role?: boolean
  currentPostingId?: boolean
  emailVerified?: boolean
  image?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  twoFactorEnabled?: boolean
}

export type UserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "email" | "phoneNumber" | "role" | "currentPostingId" | "emailVerified" | "image" | "createdAt" | "updatedAt" | "twoFactorEnabled", ExtArgs["result"]["user"]>
export type UserInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  screeningEntries?: boolean | Prisma.User$screeningEntriesArgs<ExtArgs>
  postingHistory?: boolean | Prisma.User$postingHistoryArgs<ExtArgs>
  staffFolder?: boolean | Prisma.User$staffFolderArgs<ExtArgs>
  complains?: boolean | Prisma.User$complainsArgs<ExtArgs>
  feedbacks?: boolean | Prisma.User$feedbacksArgs<ExtArgs>
  Session?: boolean | Prisma.User$SessionArgs<ExtArgs>
  Account?: boolean | Prisma.User$AccountArgs<ExtArgs>
  _count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>
}
export type UserIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type UserIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $UserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    screeningEntries: Prisma.$ScreeningEntryPayload<ExtArgs>[]
    postingHistory: Prisma.$PostingPayload<ExtArgs>[]
    staffFolder: Prisma.$StaffFolderPayload<ExtArgs> | null
    complains: Prisma.$FeedbackPayload<ExtArgs>[]
    feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    Session: Prisma.$SessionPayload<ExtArgs>[]
    Account: Prisma.$AccountPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    email: string
    phoneNumber: string
    role: string
    currentPostingId: string | null
    emailVerified: boolean
    image: string | null
    createdAt: Date
    updatedAt: Date
    twoFactorEnabled: boolean
  }, ExtArgs["result"]["user"]>
  composites: {}
}

export type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserPayload, S>

export type UserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserCountAggregateInputType | true
  }

export interface UserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
  /**
   * Find zero or one User that matches the filter.
   * @param {UserFindUniqueArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserFindUniqueArgs>(args: Prisma.SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one User that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindFirstArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserFindFirstArgs>(args?: Prisma.SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Users that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserFindManyArgs>(args?: Prisma.SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
   */
  create<T extends UserCreateArgs>(args: Prisma.SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Users.
   * @param {UserCreateManyArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const user = await prisma.user.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserCreateManyArgs>(args?: Prisma.SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Users and returns the data saved in the database.
   * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const user = await prisma.user.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Users and only return the `id`
   * const userWithIdOnly = await prisma.user.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
   */
  delete<T extends UserDeleteArgs>(args: Prisma.SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserUpdateArgs>(args: Prisma.SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserUpdateManyArgs>(args: Prisma.SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users and returns the data updated in the database.
   * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Users and only return the `id`
   * const userWithIdOnly = await prisma.user.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
   */
  upsert<T extends UserUpsertArgs>(args: Prisma.SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCountArgs} args - Arguments to filter Users to count.
   * @example
   * // Count the number of Users
   * const count = await prisma.user.count({
   *   where: {
   *     // ... the filter for the Users we want to count
   *   }
   * })
  **/
  count<T extends UserCountArgs>(
    args?: Prisma.Subset<T, UserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserAggregateArgs>(args: Prisma.Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

  /**
   * Group by User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserGroupByArgs['orderBy'] }
      : { orderBy?: UserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the User model
 */
readonly fields: UserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  screeningEntries<T extends Prisma.User$screeningEntriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$screeningEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  postingHistory<T extends Prisma.User$postingHistoryArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$postingHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  staffFolder<T extends Prisma.User$staffFolderArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$staffFolderArgs<ExtArgs>>): Prisma.Prisma__StaffFolderClient<runtime.Types.Result.GetResult<Prisma.$StaffFolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  complains<T extends Prisma.User$complainsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$complainsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  feedbacks<T extends Prisma.User$feedbacksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Session<T extends Prisma.User$SessionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$SessionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Account<T extends Prisma.User$AccountArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$AccountArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the User model
 */
export interface UserFieldRefs {
  readonly id: Prisma.FieldRef<"User", 'String'>
  readonly name: Prisma.FieldRef<"User", 'String'>
  readonly email: Prisma.FieldRef<"User", 'String'>
  readonly phoneNumber: Prisma.FieldRef<"User", 'String'>
  readonly role: Prisma.FieldRef<"User", 'String'>
  readonly currentPostingId: Prisma.FieldRef<"User", 'String'>
  readonly emailVerified: Prisma.FieldRef<"User", 'Boolean'>
  readonly image: Prisma.FieldRef<"User", 'String'>
  readonly createdAt: Prisma.FieldRef<"User", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"User", 'DateTime'>
  readonly twoFactorEnabled: Prisma.FieldRef<"User", 'Boolean'>
}
    

// Custom InputTypes
/**
 * User findUnique
 */
export type UserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User findUniqueOrThrow
 */
export type UserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User findFirst
 */
export type UserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User findFirstOrThrow
 */
export type UserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User findMany
 */
export type UserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which Users to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User create
 */
export type UserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The data needed to create a User.
   */
  data: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>
}

/**
 * User createMany
 */
export type UserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Users.
   */
  data: Prisma.UserCreateManyInput | Prisma.UserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * User createManyAndReturn
 */
export type UserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * The data used to create many Users.
   */
  data: Prisma.UserCreateManyInput | Prisma.UserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * User update
 */
export type UserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The data needed to update a User.
   */
  data: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>
  /**
   * Choose, which User to update.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User updateMany
 */
export type UserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Users.
   */
  data: Prisma.XOR<Prisma.UserUpdateManyMutationInput, Prisma.UserUncheckedUpdateManyInput>
  /**
   * Filter which Users to update
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to update.
   */
  limit?: number
}

/**
 * User updateManyAndReturn
 */
export type UserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * The data used to update Users.
   */
  data: Prisma.XOR<Prisma.UserUpdateManyMutationInput, Prisma.UserUncheckedUpdateManyInput>
  /**
   * Filter which Users to update
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to update.
   */
  limit?: number
}

/**
 * User upsert
 */
export type UserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The filter to search for the User to update in case it exists.
   */
  where: Prisma.UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
   */
  create: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>
}

/**
 * User delete
 */
export type UserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter which User to delete.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User deleteMany
 */
export type UserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Users to delete
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to delete.
   */
  limit?: number
}

/**
 * User.screeningEntries
 */
export type User$screeningEntriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  where?: Prisma.ScreeningEntryWhereInput
  orderBy?: Prisma.ScreeningEntryOrderByWithRelationInput | Prisma.ScreeningEntryOrderByWithRelationInput[]
  cursor?: Prisma.ScreeningEntryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ScreeningEntryScalarFieldEnum | Prisma.ScreeningEntryScalarFieldEnum[]
}

/**
 * User.postingHistory
 */
export type User$postingHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  where?: Prisma.PostingWhereInput
  orderBy?: Prisma.PostingOrderByWithRelationInput | Prisma.PostingOrderByWithRelationInput[]
  cursor?: Prisma.PostingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PostingScalarFieldEnum | Prisma.PostingScalarFieldEnum[]
}

/**
 * User.staffFolder
 */
export type User$staffFolderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StaffFolder
   */
  select?: Prisma.StaffFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StaffFolder
   */
  omit?: Prisma.StaffFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StaffFolderInclude<ExtArgs> | null
  where?: Prisma.StaffFolderWhereInput
}

/**
 * User.complains
 */
export type User$complainsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null
  where?: Prisma.FeedbackWhereInput
  orderBy?: Prisma.FeedbackOrderByWithRelationInput | Prisma.FeedbackOrderByWithRelationInput[]
  cursor?: Prisma.FeedbackWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FeedbackScalarFieldEnum | Prisma.FeedbackScalarFieldEnum[]
}

/**
 * User.feedbacks
 */
export type User$feedbacksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null
  where?: Prisma.FeedbackWhereInput
  orderBy?: Prisma.FeedbackOrderByWithRelationInput | Prisma.FeedbackOrderByWithRelationInput[]
  cursor?: Prisma.FeedbackWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FeedbackScalarFieldEnum | Prisma.FeedbackScalarFieldEnum[]
}

/**
 * User.Session
 */
export type User$SessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Session
   */
  select?: Prisma.SessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Session
   */
  omit?: Prisma.SessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SessionInclude<ExtArgs> | null
  where?: Prisma.SessionWhereInput
  orderBy?: Prisma.SessionOrderByWithRelationInput | Prisma.SessionOrderByWithRelationInput[]
  cursor?: Prisma.SessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SessionScalarFieldEnum | Prisma.SessionScalarFieldEnum[]
}

/**
 * User.Account
 */
export type User$AccountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  where?: Prisma.AccountWhereInput
  orderBy?: Prisma.AccountOrderByWithRelationInput | Prisma.AccountOrderByWithRelationInput[]
  cursor?: Prisma.AccountWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[]
}

/**
 * User without action
 */
export type UserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
}
