
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ContactMessage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ContactMessage
 * 
 */
export type ContactMessageModel = runtime.Types.Result.DefaultSelection<Prisma.$ContactMessagePayload>

export type AggregateContactMessage = {
  _count: ContactMessageCountAggregateOutputType | null
  _min: ContactMessageMinAggregateOutputType | null
  _max: ContactMessageMaxAggregateOutputType | null
}

export type ContactMessageMinAggregateOutputType = {
  id: string | null
  name: string | null
  phoneNumber: string | null
  email: string | null
  body: string | null
  reply: string | null
  createdAt: Date | null
}

export type ContactMessageMaxAggregateOutputType = {
  id: string | null
  name: string | null
  phoneNumber: string | null
  email: string | null
  body: string | null
  reply: string | null
  createdAt: Date | null
}

export type ContactMessageCountAggregateOutputType = {
  id: number
  name: number
  phoneNumber: number
  email: number
  body: number
  reply: number
  createdAt: number
  _all: number
}


export type ContactMessageMinAggregateInputType = {
  id?: true
  name?: true
  phoneNumber?: true
  email?: true
  body?: true
  reply?: true
  createdAt?: true
}

export type ContactMessageMaxAggregateInputType = {
  id?: true
  name?: true
  phoneNumber?: true
  email?: true
  body?: true
  reply?: true
  createdAt?: true
}

export type ContactMessageCountAggregateInputType = {
  id?: true
  name?: true
  phoneNumber?: true
  email?: true
  body?: true
  reply?: true
  createdAt?: true
  _all?: true
}

export type ContactMessageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ContactMessage to aggregate.
   */
  where?: Prisma.ContactMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContactMessages to fetch.
   */
  orderBy?: Prisma.ContactMessageOrderByWithRelationInput | Prisma.ContactMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ContactMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContactMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContactMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ContactMessages
  **/
  _count?: true | ContactMessageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ContactMessageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ContactMessageMaxAggregateInputType
}

export type GetContactMessageAggregateType<T extends ContactMessageAggregateArgs> = {
      [P in keyof T & keyof AggregateContactMessage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContactMessage[P]>
    : Prisma.GetScalarType<T[P], AggregateContactMessage[P]>
}




export type ContactMessageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContactMessageWhereInput
  orderBy?: Prisma.ContactMessageOrderByWithAggregationInput | Prisma.ContactMessageOrderByWithAggregationInput[]
  by: Prisma.ContactMessageScalarFieldEnum[] | Prisma.ContactMessageScalarFieldEnum
  having?: Prisma.ContactMessageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ContactMessageCountAggregateInputType | true
  _min?: ContactMessageMinAggregateInputType
  _max?: ContactMessageMaxAggregateInputType
}

export type ContactMessageGroupByOutputType = {
  id: string
  name: string
  phoneNumber: string
  email: string
  body: string
  reply: string | null
  createdAt: Date
  _count: ContactMessageCountAggregateOutputType | null
  _min: ContactMessageMinAggregateOutputType | null
  _max: ContactMessageMaxAggregateOutputType | null
}

type GetContactMessageGroupByPayload<T extends ContactMessageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContactMessageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ContactMessageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContactMessageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContactMessageGroupByOutputType[P]>
      }
    >
  >



export type ContactMessageWhereInput = {
  AND?: Prisma.ContactMessageWhereInput | Prisma.ContactMessageWhereInput[]
  OR?: Prisma.ContactMessageWhereInput[]
  NOT?: Prisma.ContactMessageWhereInput | Prisma.ContactMessageWhereInput[]
  id?: Prisma.StringFilter<"ContactMessage"> | string
  name?: Prisma.StringFilter<"ContactMessage"> | string
  phoneNumber?: Prisma.StringFilter<"ContactMessage"> | string
  email?: Prisma.StringFilter<"ContactMessage"> | string
  body?: Prisma.StringFilter<"ContactMessage"> | string
  reply?: Prisma.StringNullableFilter<"ContactMessage"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ContactMessage"> | Date | string
}

export type ContactMessageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
  body?: Prisma.SortOrder
  reply?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ContactMessageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ContactMessageWhereInput | Prisma.ContactMessageWhereInput[]
  OR?: Prisma.ContactMessageWhereInput[]
  NOT?: Prisma.ContactMessageWhereInput | Prisma.ContactMessageWhereInput[]
  name?: Prisma.StringFilter<"ContactMessage"> | string
  phoneNumber?: Prisma.StringFilter<"ContactMessage"> | string
  email?: Prisma.StringFilter<"ContactMessage"> | string
  body?: Prisma.StringFilter<"ContactMessage"> | string
  reply?: Prisma.StringNullableFilter<"ContactMessage"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ContactMessage"> | Date | string
}, "id" | "id">

export type ContactMessageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
  body?: Prisma.SortOrder
  reply?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ContactMessageCountOrderByAggregateInput
  _max?: Prisma.ContactMessageMaxOrderByAggregateInput
  _min?: Prisma.ContactMessageMinOrderByAggregateInput
}

export type ContactMessageScalarWhereWithAggregatesInput = {
  AND?: Prisma.ContactMessageScalarWhereWithAggregatesInput | Prisma.ContactMessageScalarWhereWithAggregatesInput[]
  OR?: Prisma.ContactMessageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ContactMessageScalarWhereWithAggregatesInput | Prisma.ContactMessageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ContactMessage"> | string
  name?: Prisma.StringWithAggregatesFilter<"ContactMessage"> | string
  phoneNumber?: Prisma.StringWithAggregatesFilter<"ContactMessage"> | string
  email?: Prisma.StringWithAggregatesFilter<"ContactMessage"> | string
  body?: Prisma.StringWithAggregatesFilter<"ContactMessage"> | string
  reply?: Prisma.StringNullableWithAggregatesFilter<"ContactMessage"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ContactMessage"> | Date | string
}

export type ContactMessageCreateInput = {
  id?: string
  name: string
  phoneNumber: string
  email: string
  body: string
  reply?: string | null
  createdAt?: Date | string
}

export type ContactMessageUncheckedCreateInput = {
  id?: string
  name: string
  phoneNumber: string
  email: string
  body: string
  reply?: string | null
  createdAt?: Date | string
}

export type ContactMessageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  reply?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactMessageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  reply?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactMessageCreateManyInput = {
  id?: string
  name: string
  phoneNumber: string
  email: string
  body: string
  reply?: string | null
  createdAt?: Date | string
}

export type ContactMessageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  reply?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactMessageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  reply?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactMessageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
  body?: Prisma.SortOrder
  reply?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ContactMessageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
  body?: Prisma.SortOrder
  reply?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ContactMessageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  email?: Prisma.SortOrder
  body?: Prisma.SortOrder
  reply?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type ContactMessageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  phoneNumber?: boolean
  email?: boolean
  body?: boolean
  reply?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["contactMessage"]>

export type ContactMessageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  phoneNumber?: boolean
  email?: boolean
  body?: boolean
  reply?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["contactMessage"]>

export type ContactMessageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  phoneNumber?: boolean
  email?: boolean
  body?: boolean
  reply?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["contactMessage"]>

export type ContactMessageSelectScalar = {
  id?: boolean
  name?: boolean
  phoneNumber?: boolean
  email?: boolean
  body?: boolean
  reply?: boolean
  createdAt?: boolean
}

export type ContactMessageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "phoneNumber" | "email" | "body" | "reply" | "createdAt", ExtArgs["result"]["contactMessage"]>

export type $ContactMessagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ContactMessage"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    phoneNumber: string
    email: string
    body: string
    reply: string | null
    createdAt: Date
  }, ExtArgs["result"]["contactMessage"]>
  composites: {}
}

export type ContactMessageGetPayload<S extends boolean | null | undefined | ContactMessageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload, S>

export type ContactMessageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ContactMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ContactMessageCountAggregateInputType | true
  }

export interface ContactMessageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactMessage'], meta: { name: 'ContactMessage' } }
  /**
   * Find zero or one ContactMessage that matches the filter.
   * @param {ContactMessageFindUniqueArgs} args - Arguments to find a ContactMessage
   * @example
   * // Get one ContactMessage
   * const contactMessage = await prisma.contactMessage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContactMessageFindUniqueArgs>(args: Prisma.SelectSubset<T, ContactMessageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ContactMessageClient<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ContactMessage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContactMessageFindUniqueOrThrowArgs} args - Arguments to find a ContactMessage
   * @example
   * // Get one ContactMessage
   * const contactMessage = await prisma.contactMessage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContactMessageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ContactMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContactMessageClient<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ContactMessage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactMessageFindFirstArgs} args - Arguments to find a ContactMessage
   * @example
   * // Get one ContactMessage
   * const contactMessage = await prisma.contactMessage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContactMessageFindFirstArgs>(args?: Prisma.SelectSubset<T, ContactMessageFindFirstArgs<ExtArgs>>): Prisma.Prisma__ContactMessageClient<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ContactMessage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactMessageFindFirstOrThrowArgs} args - Arguments to find a ContactMessage
   * @example
   * // Get one ContactMessage
   * const contactMessage = await prisma.contactMessage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContactMessageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ContactMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContactMessageClient<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ContactMessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactMessageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ContactMessages
   * const contactMessages = await prisma.contactMessage.findMany()
   * 
   * // Get first 10 ContactMessages
   * const contactMessages = await prisma.contactMessage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const contactMessageWithIdOnly = await prisma.contactMessage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ContactMessageFindManyArgs>(args?: Prisma.SelectSubset<T, ContactMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ContactMessage.
   * @param {ContactMessageCreateArgs} args - Arguments to create a ContactMessage.
   * @example
   * // Create one ContactMessage
   * const ContactMessage = await prisma.contactMessage.create({
   *   data: {
   *     // ... data to create a ContactMessage
   *   }
   * })
   * 
   */
  create<T extends ContactMessageCreateArgs>(args: Prisma.SelectSubset<T, ContactMessageCreateArgs<ExtArgs>>): Prisma.Prisma__ContactMessageClient<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ContactMessages.
   * @param {ContactMessageCreateManyArgs} args - Arguments to create many ContactMessages.
   * @example
   * // Create many ContactMessages
   * const contactMessage = await prisma.contactMessage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ContactMessageCreateManyArgs>(args?: Prisma.SelectSubset<T, ContactMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ContactMessages and returns the data saved in the database.
   * @param {ContactMessageCreateManyAndReturnArgs} args - Arguments to create many ContactMessages.
   * @example
   * // Create many ContactMessages
   * const contactMessage = await prisma.contactMessage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ContactMessages and only return the `id`
   * const contactMessageWithIdOnly = await prisma.contactMessage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ContactMessageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ContactMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ContactMessage.
   * @param {ContactMessageDeleteArgs} args - Arguments to delete one ContactMessage.
   * @example
   * // Delete one ContactMessage
   * const ContactMessage = await prisma.contactMessage.delete({
   *   where: {
   *     // ... filter to delete one ContactMessage
   *   }
   * })
   * 
   */
  delete<T extends ContactMessageDeleteArgs>(args: Prisma.SelectSubset<T, ContactMessageDeleteArgs<ExtArgs>>): Prisma.Prisma__ContactMessageClient<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ContactMessage.
   * @param {ContactMessageUpdateArgs} args - Arguments to update one ContactMessage.
   * @example
   * // Update one ContactMessage
   * const contactMessage = await prisma.contactMessage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ContactMessageUpdateArgs>(args: Prisma.SelectSubset<T, ContactMessageUpdateArgs<ExtArgs>>): Prisma.Prisma__ContactMessageClient<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ContactMessages.
   * @param {ContactMessageDeleteManyArgs} args - Arguments to filter ContactMessages to delete.
   * @example
   * // Delete a few ContactMessages
   * const { count } = await prisma.contactMessage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ContactMessageDeleteManyArgs>(args?: Prisma.SelectSubset<T, ContactMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ContactMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactMessageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ContactMessages
   * const contactMessage = await prisma.contactMessage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ContactMessageUpdateManyArgs>(args: Prisma.SelectSubset<T, ContactMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ContactMessages and returns the data updated in the database.
   * @param {ContactMessageUpdateManyAndReturnArgs} args - Arguments to update many ContactMessages.
   * @example
   * // Update many ContactMessages
   * const contactMessage = await prisma.contactMessage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ContactMessages and only return the `id`
   * const contactMessageWithIdOnly = await prisma.contactMessage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ContactMessageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ContactMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ContactMessage.
   * @param {ContactMessageUpsertArgs} args - Arguments to update or create a ContactMessage.
   * @example
   * // Update or create a ContactMessage
   * const contactMessage = await prisma.contactMessage.upsert({
   *   create: {
   *     // ... data to create a ContactMessage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ContactMessage we want to update
   *   }
   * })
   */
  upsert<T extends ContactMessageUpsertArgs>(args: Prisma.SelectSubset<T, ContactMessageUpsertArgs<ExtArgs>>): Prisma.Prisma__ContactMessageClient<runtime.Types.Result.GetResult<Prisma.$ContactMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ContactMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactMessageCountArgs} args - Arguments to filter ContactMessages to count.
   * @example
   * // Count the number of ContactMessages
   * const count = await prisma.contactMessage.count({
   *   where: {
   *     // ... the filter for the ContactMessages we want to count
   *   }
   * })
  **/
  count<T extends ContactMessageCountArgs>(
    args?: Prisma.Subset<T, ContactMessageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContactMessageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ContactMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ContactMessageAggregateArgs>(args: Prisma.Subset<T, ContactMessageAggregateArgs>): Prisma.PrismaPromise<GetContactMessageAggregateType<T>>

  /**
   * Group by ContactMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactMessageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ContactMessageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContactMessageGroupByArgs['orderBy'] }
      : { orderBy?: ContactMessageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ContactMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ContactMessage model
 */
readonly fields: ContactMessageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ContactMessage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContactMessageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ContactMessage model
 */
export interface ContactMessageFieldRefs {
  readonly id: Prisma.FieldRef<"ContactMessage", 'String'>
  readonly name: Prisma.FieldRef<"ContactMessage", 'String'>
  readonly phoneNumber: Prisma.FieldRef<"ContactMessage", 'String'>
  readonly email: Prisma.FieldRef<"ContactMessage", 'String'>
  readonly body: Prisma.FieldRef<"ContactMessage", 'String'>
  readonly reply: Prisma.FieldRef<"ContactMessage", 'String'>
  readonly createdAt: Prisma.FieldRef<"ContactMessage", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ContactMessage findUnique
 */
export type ContactMessageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * Filter, which ContactMessage to fetch.
   */
  where: Prisma.ContactMessageWhereUniqueInput
}

/**
 * ContactMessage findUniqueOrThrow
 */
export type ContactMessageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * Filter, which ContactMessage to fetch.
   */
  where: Prisma.ContactMessageWhereUniqueInput
}

/**
 * ContactMessage findFirst
 */
export type ContactMessageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * Filter, which ContactMessage to fetch.
   */
  where?: Prisma.ContactMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContactMessages to fetch.
   */
  orderBy?: Prisma.ContactMessageOrderByWithRelationInput | Prisma.ContactMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ContactMessages.
   */
  cursor?: Prisma.ContactMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContactMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContactMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ContactMessages.
   */
  distinct?: Prisma.ContactMessageScalarFieldEnum | Prisma.ContactMessageScalarFieldEnum[]
}

/**
 * ContactMessage findFirstOrThrow
 */
export type ContactMessageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * Filter, which ContactMessage to fetch.
   */
  where?: Prisma.ContactMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContactMessages to fetch.
   */
  orderBy?: Prisma.ContactMessageOrderByWithRelationInput | Prisma.ContactMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ContactMessages.
   */
  cursor?: Prisma.ContactMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContactMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContactMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ContactMessages.
   */
  distinct?: Prisma.ContactMessageScalarFieldEnum | Prisma.ContactMessageScalarFieldEnum[]
}

/**
 * ContactMessage findMany
 */
export type ContactMessageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * Filter, which ContactMessages to fetch.
   */
  where?: Prisma.ContactMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ContactMessages to fetch.
   */
  orderBy?: Prisma.ContactMessageOrderByWithRelationInput | Prisma.ContactMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ContactMessages.
   */
  cursor?: Prisma.ContactMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ContactMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ContactMessages.
   */
  skip?: number
  distinct?: Prisma.ContactMessageScalarFieldEnum | Prisma.ContactMessageScalarFieldEnum[]
}

/**
 * ContactMessage create
 */
export type ContactMessageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * The data needed to create a ContactMessage.
   */
  data: Prisma.XOR<Prisma.ContactMessageCreateInput, Prisma.ContactMessageUncheckedCreateInput>
}

/**
 * ContactMessage createMany
 */
export type ContactMessageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ContactMessages.
   */
  data: Prisma.ContactMessageCreateManyInput | Prisma.ContactMessageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ContactMessage createManyAndReturn
 */
export type ContactMessageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * The data used to create many ContactMessages.
   */
  data: Prisma.ContactMessageCreateManyInput | Prisma.ContactMessageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ContactMessage update
 */
export type ContactMessageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * The data needed to update a ContactMessage.
   */
  data: Prisma.XOR<Prisma.ContactMessageUpdateInput, Prisma.ContactMessageUncheckedUpdateInput>
  /**
   * Choose, which ContactMessage to update.
   */
  where: Prisma.ContactMessageWhereUniqueInput
}

/**
 * ContactMessage updateMany
 */
export type ContactMessageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ContactMessages.
   */
  data: Prisma.XOR<Prisma.ContactMessageUpdateManyMutationInput, Prisma.ContactMessageUncheckedUpdateManyInput>
  /**
   * Filter which ContactMessages to update
   */
  where?: Prisma.ContactMessageWhereInput
  /**
   * Limit how many ContactMessages to update.
   */
  limit?: number
}

/**
 * ContactMessage updateManyAndReturn
 */
export type ContactMessageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * The data used to update ContactMessages.
   */
  data: Prisma.XOR<Prisma.ContactMessageUpdateManyMutationInput, Prisma.ContactMessageUncheckedUpdateManyInput>
  /**
   * Filter which ContactMessages to update
   */
  where?: Prisma.ContactMessageWhereInput
  /**
   * Limit how many ContactMessages to update.
   */
  limit?: number
}

/**
 * ContactMessage upsert
 */
export type ContactMessageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * The filter to search for the ContactMessage to update in case it exists.
   */
  where: Prisma.ContactMessageWhereUniqueInput
  /**
   * In case the ContactMessage found by the `where` argument doesn't exist, create a new ContactMessage with this data.
   */
  create: Prisma.XOR<Prisma.ContactMessageCreateInput, Prisma.ContactMessageUncheckedCreateInput>
  /**
   * In case the ContactMessage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContactMessageUpdateInput, Prisma.ContactMessageUncheckedUpdateInput>
}

/**
 * ContactMessage delete
 */
export type ContactMessageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
  /**
   * Filter which ContactMessage to delete.
   */
  where: Prisma.ContactMessageWhereUniqueInput
}

/**
 * ContactMessage deleteMany
 */
export type ContactMessageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ContactMessages to delete
   */
  where?: Prisma.ContactMessageWhereInput
  /**
   * Limit how many ContactMessages to delete.
   */
  limit?: number
}

/**
 * ContactMessage without action
 */
export type ContactMessageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactMessage
   */
  select?: Prisma.ContactMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ContactMessage
   */
  omit?: Prisma.ContactMessageOmit<ExtArgs> | null
}
