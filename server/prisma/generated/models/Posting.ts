
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Posting` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Posting
 * 
 */
export type PostingModel = runtime.Types.Result.DefaultSelection<Prisma.$PostingPayload>

export type AggregatePosting = {
  _count: PostingCountAggregateOutputType | null
  _min: PostingMinAggregateOutputType | null
  _max: PostingMaxAggregateOutputType | null
}

export type PostingMinAggregateOutputType = {
  id: string | null
  type: string | null
  staffId: string | null
  lga: string | null
  position: string | null
  department: string | null
  course: string | null
  institute: string | null
  message: string | null
  createdAt: Date | null
}

export type PostingMaxAggregateOutputType = {
  id: string | null
  type: string | null
  staffId: string | null
  lga: string | null
  position: string | null
  department: string | null
  course: string | null
  institute: string | null
  message: string | null
  createdAt: Date | null
}

export type PostingCountAggregateOutputType = {
  id: number
  type: number
  staffId: number
  lga: number
  position: number
  department: number
  course: number
  institute: number
  message: number
  createdAt: number
  _all: number
}


export type PostingMinAggregateInputType = {
  id?: true
  type?: true
  staffId?: true
  lga?: true
  position?: true
  department?: true
  course?: true
  institute?: true
  message?: true
  createdAt?: true
}

export type PostingMaxAggregateInputType = {
  id?: true
  type?: true
  staffId?: true
  lga?: true
  position?: true
  department?: true
  course?: true
  institute?: true
  message?: true
  createdAt?: true
}

export type PostingCountAggregateInputType = {
  id?: true
  type?: true
  staffId?: true
  lga?: true
  position?: true
  department?: true
  course?: true
  institute?: true
  message?: true
  createdAt?: true
  _all?: true
}

export type PostingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Posting to aggregate.
   */
  where?: Prisma.PostingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Postings to fetch.
   */
  orderBy?: Prisma.PostingOrderByWithRelationInput | Prisma.PostingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PostingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Postings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Postings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Postings
  **/
  _count?: true | PostingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PostingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PostingMaxAggregateInputType
}

export type GetPostingAggregateType<T extends PostingAggregateArgs> = {
      [P in keyof T & keyof AggregatePosting]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePosting[P]>
    : Prisma.GetScalarType<T[P], AggregatePosting[P]>
}




export type PostingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostingWhereInput
  orderBy?: Prisma.PostingOrderByWithAggregationInput | Prisma.PostingOrderByWithAggregationInput[]
  by: Prisma.PostingScalarFieldEnum[] | Prisma.PostingScalarFieldEnum
  having?: Prisma.PostingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PostingCountAggregateInputType | true
  _min?: PostingMinAggregateInputType
  _max?: PostingMaxAggregateInputType
}

export type PostingGroupByOutputType = {
  id: string
  type: string
  staffId: string
  lga: string
  position: string
  department: string | null
  course: string | null
  institute: string
  message: string
  createdAt: Date
  _count: PostingCountAggregateOutputType | null
  _min: PostingMinAggregateOutputType | null
  _max: PostingMaxAggregateOutputType | null
}

type GetPostingGroupByPayload<T extends PostingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PostingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PostingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PostingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PostingGroupByOutputType[P]>
      }
    >
  >



export type PostingWhereInput = {
  AND?: Prisma.PostingWhereInput | Prisma.PostingWhereInput[]
  OR?: Prisma.PostingWhereInput[]
  NOT?: Prisma.PostingWhereInput | Prisma.PostingWhereInput[]
  id?: Prisma.StringFilter<"Posting"> | string
  type?: Prisma.StringFilter<"Posting"> | string
  staffId?: Prisma.StringFilter<"Posting"> | string
  lga?: Prisma.StringFilter<"Posting"> | string
  position?: Prisma.StringFilter<"Posting"> | string
  department?: Prisma.StringNullableFilter<"Posting"> | string | null
  course?: Prisma.StringNullableFilter<"Posting"> | string | null
  institute?: Prisma.StringFilter<"Posting"> | string
  message?: Prisma.StringFilter<"Posting"> | string
  createdAt?: Prisma.DateTimeFilter<"Posting"> | Date | string
  staff?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type PostingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  lga?: Prisma.SortOrder
  position?: Prisma.SortOrder
  department?: Prisma.SortOrderInput | Prisma.SortOrder
  course?: Prisma.SortOrderInput | Prisma.SortOrder
  institute?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  staff?: Prisma.UserOrderByWithRelationInput
}

export type PostingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PostingWhereInput | Prisma.PostingWhereInput[]
  OR?: Prisma.PostingWhereInput[]
  NOT?: Prisma.PostingWhereInput | Prisma.PostingWhereInput[]
  type?: Prisma.StringFilter<"Posting"> | string
  staffId?: Prisma.StringFilter<"Posting"> | string
  lga?: Prisma.StringFilter<"Posting"> | string
  position?: Prisma.StringFilter<"Posting"> | string
  department?: Prisma.StringNullableFilter<"Posting"> | string | null
  course?: Prisma.StringNullableFilter<"Posting"> | string | null
  institute?: Prisma.StringFilter<"Posting"> | string
  message?: Prisma.StringFilter<"Posting"> | string
  createdAt?: Prisma.DateTimeFilter<"Posting"> | Date | string
  staff?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "id">

export type PostingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  lga?: Prisma.SortOrder
  position?: Prisma.SortOrder
  department?: Prisma.SortOrderInput | Prisma.SortOrder
  course?: Prisma.SortOrderInput | Prisma.SortOrder
  institute?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.PostingCountOrderByAggregateInput
  _max?: Prisma.PostingMaxOrderByAggregateInput
  _min?: Prisma.PostingMinOrderByAggregateInput
}

export type PostingScalarWhereWithAggregatesInput = {
  AND?: Prisma.PostingScalarWhereWithAggregatesInput | Prisma.PostingScalarWhereWithAggregatesInput[]
  OR?: Prisma.PostingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PostingScalarWhereWithAggregatesInput | Prisma.PostingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Posting"> | string
  type?: Prisma.StringWithAggregatesFilter<"Posting"> | string
  staffId?: Prisma.StringWithAggregatesFilter<"Posting"> | string
  lga?: Prisma.StringWithAggregatesFilter<"Posting"> | string
  position?: Prisma.StringWithAggregatesFilter<"Posting"> | string
  department?: Prisma.StringNullableWithAggregatesFilter<"Posting"> | string | null
  course?: Prisma.StringNullableWithAggregatesFilter<"Posting"> | string | null
  institute?: Prisma.StringWithAggregatesFilter<"Posting"> | string
  message?: Prisma.StringWithAggregatesFilter<"Posting"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Posting"> | Date | string
}

export type PostingCreateInput = {
  id?: string
  type: string
  lga: string
  position: string
  department?: string | null
  course?: string | null
  institute: string
  message: string
  createdAt?: Date | string
  staff: Prisma.UserCreateNestedOneWithoutPostingHistoryInput
}

export type PostingUncheckedCreateInput = {
  id?: string
  type: string
  staffId: string
  lga: string
  position: string
  department?: string | null
  course?: string | null
  institute: string
  message: string
  createdAt?: Date | string
}

export type PostingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  lga?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  course?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institute?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  staff?: Prisma.UserUpdateOneRequiredWithoutPostingHistoryNestedInput
}

export type PostingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  lga?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  course?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institute?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostingCreateManyInput = {
  id?: string
  type: string
  staffId: string
  lga: string
  position: string
  department?: string | null
  course?: string | null
  institute: string
  message: string
  createdAt?: Date | string
}

export type PostingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  lga?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  course?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institute?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  lga?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  course?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institute?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostingListRelationFilter = {
  every?: Prisma.PostingWhereInput
  some?: Prisma.PostingWhereInput
  none?: Prisma.PostingWhereInput
}

export type PostingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PostingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  lga?: Prisma.SortOrder
  position?: Prisma.SortOrder
  department?: Prisma.SortOrder
  course?: Prisma.SortOrder
  institute?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PostingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  lga?: Prisma.SortOrder
  position?: Prisma.SortOrder
  department?: Prisma.SortOrder
  course?: Prisma.SortOrder
  institute?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PostingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  lga?: Prisma.SortOrder
  position?: Prisma.SortOrder
  department?: Prisma.SortOrder
  course?: Prisma.SortOrder
  institute?: Prisma.SortOrder
  message?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PostingCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.PostingCreateWithoutStaffInput, Prisma.PostingUncheckedCreateWithoutStaffInput> | Prisma.PostingCreateWithoutStaffInput[] | Prisma.PostingUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.PostingCreateOrConnectWithoutStaffInput | Prisma.PostingCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.PostingCreateManyStaffInputEnvelope
  connect?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
}

export type PostingUncheckedCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.PostingCreateWithoutStaffInput, Prisma.PostingUncheckedCreateWithoutStaffInput> | Prisma.PostingCreateWithoutStaffInput[] | Prisma.PostingUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.PostingCreateOrConnectWithoutStaffInput | Prisma.PostingCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.PostingCreateManyStaffInputEnvelope
  connect?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
}

export type PostingUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.PostingCreateWithoutStaffInput, Prisma.PostingUncheckedCreateWithoutStaffInput> | Prisma.PostingCreateWithoutStaffInput[] | Prisma.PostingUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.PostingCreateOrConnectWithoutStaffInput | Prisma.PostingCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.PostingUpsertWithWhereUniqueWithoutStaffInput | Prisma.PostingUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.PostingCreateManyStaffInputEnvelope
  set?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
  disconnect?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
  delete?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
  connect?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
  update?: Prisma.PostingUpdateWithWhereUniqueWithoutStaffInput | Prisma.PostingUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.PostingUpdateManyWithWhereWithoutStaffInput | Prisma.PostingUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.PostingScalarWhereInput | Prisma.PostingScalarWhereInput[]
}

export type PostingUncheckedUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.PostingCreateWithoutStaffInput, Prisma.PostingUncheckedCreateWithoutStaffInput> | Prisma.PostingCreateWithoutStaffInput[] | Prisma.PostingUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.PostingCreateOrConnectWithoutStaffInput | Prisma.PostingCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.PostingUpsertWithWhereUniqueWithoutStaffInput | Prisma.PostingUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.PostingCreateManyStaffInputEnvelope
  set?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
  disconnect?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
  delete?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
  connect?: Prisma.PostingWhereUniqueInput | Prisma.PostingWhereUniqueInput[]
  update?: Prisma.PostingUpdateWithWhereUniqueWithoutStaffInput | Prisma.PostingUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.PostingUpdateManyWithWhereWithoutStaffInput | Prisma.PostingUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.PostingScalarWhereInput | Prisma.PostingScalarWhereInput[]
}

export type PostingCreateWithoutStaffInput = {
  id?: string
  type: string
  lga: string
  position: string
  department?: string | null
  course?: string | null
  institute: string
  message: string
  createdAt?: Date | string
}

export type PostingUncheckedCreateWithoutStaffInput = {
  id?: string
  type: string
  lga: string
  position: string
  department?: string | null
  course?: string | null
  institute: string
  message: string
  createdAt?: Date | string
}

export type PostingCreateOrConnectWithoutStaffInput = {
  where: Prisma.PostingWhereUniqueInput
  create: Prisma.XOR<Prisma.PostingCreateWithoutStaffInput, Prisma.PostingUncheckedCreateWithoutStaffInput>
}

export type PostingCreateManyStaffInputEnvelope = {
  data: Prisma.PostingCreateManyStaffInput | Prisma.PostingCreateManyStaffInput[]
  skipDuplicates?: boolean
}

export type PostingUpsertWithWhereUniqueWithoutStaffInput = {
  where: Prisma.PostingWhereUniqueInput
  update: Prisma.XOR<Prisma.PostingUpdateWithoutStaffInput, Prisma.PostingUncheckedUpdateWithoutStaffInput>
  create: Prisma.XOR<Prisma.PostingCreateWithoutStaffInput, Prisma.PostingUncheckedCreateWithoutStaffInput>
}

export type PostingUpdateWithWhereUniqueWithoutStaffInput = {
  where: Prisma.PostingWhereUniqueInput
  data: Prisma.XOR<Prisma.PostingUpdateWithoutStaffInput, Prisma.PostingUncheckedUpdateWithoutStaffInput>
}

export type PostingUpdateManyWithWhereWithoutStaffInput = {
  where: Prisma.PostingScalarWhereInput
  data: Prisma.XOR<Prisma.PostingUpdateManyMutationInput, Prisma.PostingUncheckedUpdateManyWithoutStaffInput>
}

export type PostingScalarWhereInput = {
  AND?: Prisma.PostingScalarWhereInput | Prisma.PostingScalarWhereInput[]
  OR?: Prisma.PostingScalarWhereInput[]
  NOT?: Prisma.PostingScalarWhereInput | Prisma.PostingScalarWhereInput[]
  id?: Prisma.StringFilter<"Posting"> | string
  type?: Prisma.StringFilter<"Posting"> | string
  staffId?: Prisma.StringFilter<"Posting"> | string
  lga?: Prisma.StringFilter<"Posting"> | string
  position?: Prisma.StringFilter<"Posting"> | string
  department?: Prisma.StringNullableFilter<"Posting"> | string | null
  course?: Prisma.StringNullableFilter<"Posting"> | string | null
  institute?: Prisma.StringFilter<"Posting"> | string
  message?: Prisma.StringFilter<"Posting"> | string
  createdAt?: Prisma.DateTimeFilter<"Posting"> | Date | string
}

export type PostingCreateManyStaffInput = {
  id?: string
  type: string
  lga: string
  position: string
  department?: string | null
  course?: string | null
  institute: string
  message: string
  createdAt?: Date | string
}

export type PostingUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  lga?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  course?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institute?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostingUncheckedUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  lga?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  course?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institute?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostingUncheckedUpdateManyWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  lga?: Prisma.StringFieldUpdateOperationsInput | string
  position?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  course?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  institute?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PostingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  staffId?: boolean
  lga?: boolean
  position?: boolean
  department?: boolean
  course?: boolean
  institute?: boolean
  message?: boolean
  createdAt?: boolean
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["posting"]>

export type PostingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  staffId?: boolean
  lga?: boolean
  position?: boolean
  department?: boolean
  course?: boolean
  institute?: boolean
  message?: boolean
  createdAt?: boolean
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["posting"]>

export type PostingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  staffId?: boolean
  lga?: boolean
  position?: boolean
  department?: boolean
  course?: boolean
  institute?: boolean
  message?: boolean
  createdAt?: boolean
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["posting"]>

export type PostingSelectScalar = {
  id?: boolean
  type?: boolean
  staffId?: boolean
  lga?: boolean
  position?: boolean
  department?: boolean
  course?: boolean
  institute?: boolean
  message?: boolean
  createdAt?: boolean
}

export type PostingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "type" | "staffId" | "lga" | "position" | "department" | "course" | "institute" | "message" | "createdAt", ExtArgs["result"]["posting"]>
export type PostingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PostingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PostingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $PostingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Posting"
  objects: {
    staff: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    type: string
    staffId: string
    lga: string
    position: string
    department: string | null
    course: string | null
    institute: string
    message: string
    createdAt: Date
  }, ExtArgs["result"]["posting"]>
  composites: {}
}

export type PostingGetPayload<S extends boolean | null | undefined | PostingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PostingPayload, S>

export type PostingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PostingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PostingCountAggregateInputType | true
  }

export interface PostingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Posting'], meta: { name: 'Posting' } }
  /**
   * Find zero or one Posting that matches the filter.
   * @param {PostingFindUniqueArgs} args - Arguments to find a Posting
   * @example
   * // Get one Posting
   * const posting = await prisma.posting.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PostingFindUniqueArgs>(args: Prisma.SelectSubset<T, PostingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PostingClient<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Posting that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PostingFindUniqueOrThrowArgs} args - Arguments to find a Posting
   * @example
   * // Get one Posting
   * const posting = await prisma.posting.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PostingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PostingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostingClient<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Posting that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingFindFirstArgs} args - Arguments to find a Posting
   * @example
   * // Get one Posting
   * const posting = await prisma.posting.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PostingFindFirstArgs>(args?: Prisma.SelectSubset<T, PostingFindFirstArgs<ExtArgs>>): Prisma.Prisma__PostingClient<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Posting that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingFindFirstOrThrowArgs} args - Arguments to find a Posting
   * @example
   * // Get one Posting
   * const posting = await prisma.posting.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PostingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PostingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostingClient<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Postings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Postings
   * const postings = await prisma.posting.findMany()
   * 
   * // Get first 10 Postings
   * const postings = await prisma.posting.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const postingWithIdOnly = await prisma.posting.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PostingFindManyArgs>(args?: Prisma.SelectSubset<T, PostingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Posting.
   * @param {PostingCreateArgs} args - Arguments to create a Posting.
   * @example
   * // Create one Posting
   * const Posting = await prisma.posting.create({
   *   data: {
   *     // ... data to create a Posting
   *   }
   * })
   * 
   */
  create<T extends PostingCreateArgs>(args: Prisma.SelectSubset<T, PostingCreateArgs<ExtArgs>>): Prisma.Prisma__PostingClient<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Postings.
   * @param {PostingCreateManyArgs} args - Arguments to create many Postings.
   * @example
   * // Create many Postings
   * const posting = await prisma.posting.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PostingCreateManyArgs>(args?: Prisma.SelectSubset<T, PostingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Postings and returns the data saved in the database.
   * @param {PostingCreateManyAndReturnArgs} args - Arguments to create many Postings.
   * @example
   * // Create many Postings
   * const posting = await prisma.posting.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Postings and only return the `id`
   * const postingWithIdOnly = await prisma.posting.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PostingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PostingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Posting.
   * @param {PostingDeleteArgs} args - Arguments to delete one Posting.
   * @example
   * // Delete one Posting
   * const Posting = await prisma.posting.delete({
   *   where: {
   *     // ... filter to delete one Posting
   *   }
   * })
   * 
   */
  delete<T extends PostingDeleteArgs>(args: Prisma.SelectSubset<T, PostingDeleteArgs<ExtArgs>>): Prisma.Prisma__PostingClient<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Posting.
   * @param {PostingUpdateArgs} args - Arguments to update one Posting.
   * @example
   * // Update one Posting
   * const posting = await prisma.posting.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PostingUpdateArgs>(args: Prisma.SelectSubset<T, PostingUpdateArgs<ExtArgs>>): Prisma.Prisma__PostingClient<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Postings.
   * @param {PostingDeleteManyArgs} args - Arguments to filter Postings to delete.
   * @example
   * // Delete a few Postings
   * const { count } = await prisma.posting.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PostingDeleteManyArgs>(args?: Prisma.SelectSubset<T, PostingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Postings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Postings
   * const posting = await prisma.posting.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PostingUpdateManyArgs>(args: Prisma.SelectSubset<T, PostingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Postings and returns the data updated in the database.
   * @param {PostingUpdateManyAndReturnArgs} args - Arguments to update many Postings.
   * @example
   * // Update many Postings
   * const posting = await prisma.posting.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Postings and only return the `id`
   * const postingWithIdOnly = await prisma.posting.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PostingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PostingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Posting.
   * @param {PostingUpsertArgs} args - Arguments to update or create a Posting.
   * @example
   * // Update or create a Posting
   * const posting = await prisma.posting.upsert({
   *   create: {
   *     // ... data to create a Posting
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Posting we want to update
   *   }
   * })
   */
  upsert<T extends PostingUpsertArgs>(args: Prisma.SelectSubset<T, PostingUpsertArgs<ExtArgs>>): Prisma.Prisma__PostingClient<runtime.Types.Result.GetResult<Prisma.$PostingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Postings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingCountArgs} args - Arguments to filter Postings to count.
   * @example
   * // Count the number of Postings
   * const count = await prisma.posting.count({
   *   where: {
   *     // ... the filter for the Postings we want to count
   *   }
   * })
  **/
  count<T extends PostingCountArgs>(
    args?: Prisma.Subset<T, PostingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PostingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Posting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PostingAggregateArgs>(args: Prisma.Subset<T, PostingAggregateArgs>): Prisma.PrismaPromise<GetPostingAggregateType<T>>

  /**
   * Group by Posting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PostingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PostingGroupByArgs['orderBy'] }
      : { orderBy?: PostingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PostingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Posting model
 */
readonly fields: PostingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Posting.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PostingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  staff<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Posting model
 */
export interface PostingFieldRefs {
  readonly id: Prisma.FieldRef<"Posting", 'String'>
  readonly type: Prisma.FieldRef<"Posting", 'String'>
  readonly staffId: Prisma.FieldRef<"Posting", 'String'>
  readonly lga: Prisma.FieldRef<"Posting", 'String'>
  readonly position: Prisma.FieldRef<"Posting", 'String'>
  readonly department: Prisma.FieldRef<"Posting", 'String'>
  readonly course: Prisma.FieldRef<"Posting", 'String'>
  readonly institute: Prisma.FieldRef<"Posting", 'String'>
  readonly message: Prisma.FieldRef<"Posting", 'String'>
  readonly createdAt: Prisma.FieldRef<"Posting", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Posting findUnique
 */
export type PostingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  /**
   * Filter, which Posting to fetch.
   */
  where: Prisma.PostingWhereUniqueInput
}

/**
 * Posting findUniqueOrThrow
 */
export type PostingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  /**
   * Filter, which Posting to fetch.
   */
  where: Prisma.PostingWhereUniqueInput
}

/**
 * Posting findFirst
 */
export type PostingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  /**
   * Filter, which Posting to fetch.
   */
  where?: Prisma.PostingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Postings to fetch.
   */
  orderBy?: Prisma.PostingOrderByWithRelationInput | Prisma.PostingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Postings.
   */
  cursor?: Prisma.PostingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Postings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Postings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Postings.
   */
  distinct?: Prisma.PostingScalarFieldEnum | Prisma.PostingScalarFieldEnum[]
}

/**
 * Posting findFirstOrThrow
 */
export type PostingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  /**
   * Filter, which Posting to fetch.
   */
  where?: Prisma.PostingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Postings to fetch.
   */
  orderBy?: Prisma.PostingOrderByWithRelationInput | Prisma.PostingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Postings.
   */
  cursor?: Prisma.PostingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Postings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Postings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Postings.
   */
  distinct?: Prisma.PostingScalarFieldEnum | Prisma.PostingScalarFieldEnum[]
}

/**
 * Posting findMany
 */
export type PostingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  /**
   * Filter, which Postings to fetch.
   */
  where?: Prisma.PostingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Postings to fetch.
   */
  orderBy?: Prisma.PostingOrderByWithRelationInput | Prisma.PostingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Postings.
   */
  cursor?: Prisma.PostingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Postings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Postings.
   */
  skip?: number
  distinct?: Prisma.PostingScalarFieldEnum | Prisma.PostingScalarFieldEnum[]
}

/**
 * Posting create
 */
export type PostingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  /**
   * The data needed to create a Posting.
   */
  data: Prisma.XOR<Prisma.PostingCreateInput, Prisma.PostingUncheckedCreateInput>
}

/**
 * Posting createMany
 */
export type PostingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Postings.
   */
  data: Prisma.PostingCreateManyInput | Prisma.PostingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Posting createManyAndReturn
 */
export type PostingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * The data used to create many Postings.
   */
  data: Prisma.PostingCreateManyInput | Prisma.PostingCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Posting update
 */
export type PostingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  /**
   * The data needed to update a Posting.
   */
  data: Prisma.XOR<Prisma.PostingUpdateInput, Prisma.PostingUncheckedUpdateInput>
  /**
   * Choose, which Posting to update.
   */
  where: Prisma.PostingWhereUniqueInput
}

/**
 * Posting updateMany
 */
export type PostingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Postings.
   */
  data: Prisma.XOR<Prisma.PostingUpdateManyMutationInput, Prisma.PostingUncheckedUpdateManyInput>
  /**
   * Filter which Postings to update
   */
  where?: Prisma.PostingWhereInput
  /**
   * Limit how many Postings to update.
   */
  limit?: number
}

/**
 * Posting updateManyAndReturn
 */
export type PostingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * The data used to update Postings.
   */
  data: Prisma.XOR<Prisma.PostingUpdateManyMutationInput, Prisma.PostingUncheckedUpdateManyInput>
  /**
   * Filter which Postings to update
   */
  where?: Prisma.PostingWhereInput
  /**
   * Limit how many Postings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Posting upsert
 */
export type PostingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  /**
   * The filter to search for the Posting to update in case it exists.
   */
  where: Prisma.PostingWhereUniqueInput
  /**
   * In case the Posting found by the `where` argument doesn't exist, create a new Posting with this data.
   */
  create: Prisma.XOR<Prisma.PostingCreateInput, Prisma.PostingUncheckedCreateInput>
  /**
   * In case the Posting was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PostingUpdateInput, Prisma.PostingUncheckedUpdateInput>
}

/**
 * Posting delete
 */
export type PostingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
  /**
   * Filter which Posting to delete.
   */
  where: Prisma.PostingWhereUniqueInput
}

/**
 * Posting deleteMany
 */
export type PostingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Postings to delete
   */
  where?: Prisma.PostingWhereInput
  /**
   * Limit how many Postings to delete.
   */
  limit?: number
}

/**
 * Posting without action
 */
export type PostingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Posting
   */
  select?: Prisma.PostingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Posting
   */
  omit?: Prisma.PostingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingInclude<ExtArgs> | null
}
