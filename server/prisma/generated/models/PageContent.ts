
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PageContent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model PageContent
 * 
 */
export type PageContentModel = runtime.Types.Result.DefaultSelection<Prisma.$PageContentPayload>

export type AggregatePageContent = {
  _count: PageContentCountAggregateOutputType | null
  _min: PageContentMinAggregateOutputType | null
  _max: PageContentMaxAggregateOutputType | null
}

export type PageContentMinAggregateOutputType = {
  id: string | null
}

export type PageContentMaxAggregateOutputType = {
  id: string | null
}

export type PageContentCountAggregateOutputType = {
  id: number
  heroSlider: number
  gallery: number
  welcomeAddress: number
  ourGoals: number
  statsCount: number
  _all: number
}


export type PageContentMinAggregateInputType = {
  id?: true
}

export type PageContentMaxAggregateInputType = {
  id?: true
}

export type PageContentCountAggregateInputType = {
  id?: true
  heroSlider?: true
  gallery?: true
  welcomeAddress?: true
  ourGoals?: true
  statsCount?: true
  _all?: true
}

export type PageContentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PageContent to aggregate.
   */
  where?: Prisma.PageContentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PageContents to fetch.
   */
  orderBy?: Prisma.PageContentOrderByWithRelationInput | Prisma.PageContentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PageContentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PageContents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PageContents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PageContents
  **/
  _count?: true | PageContentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PageContentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PageContentMaxAggregateInputType
}

export type GetPageContentAggregateType<T extends PageContentAggregateArgs> = {
      [P in keyof T & keyof AggregatePageContent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePageContent[P]>
    : Prisma.GetScalarType<T[P], AggregatePageContent[P]>
}




export type PageContentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PageContentWhereInput
  orderBy?: Prisma.PageContentOrderByWithAggregationInput | Prisma.PageContentOrderByWithAggregationInput[]
  by: Prisma.PageContentScalarFieldEnum[] | Prisma.PageContentScalarFieldEnum
  having?: Prisma.PageContentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PageContentCountAggregateInputType | true
  _min?: PageContentMinAggregateInputType
  _max?: PageContentMaxAggregateInputType
}

export type PageContentGroupByOutputType = {
  id: string
  heroSlider: runtime.JsonValue | null
  gallery: runtime.JsonValue | null
  welcomeAddress: runtime.JsonValue | null
  ourGoals: runtime.JsonValue | null
  statsCount: runtime.JsonValue | null
  _count: PageContentCountAggregateOutputType | null
  _min: PageContentMinAggregateOutputType | null
  _max: PageContentMaxAggregateOutputType | null
}

type GetPageContentGroupByPayload<T extends PageContentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PageContentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PageContentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PageContentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PageContentGroupByOutputType[P]>
      }
    >
  >



export type PageContentWhereInput = {
  AND?: Prisma.PageContentWhereInput | Prisma.PageContentWhereInput[]
  OR?: Prisma.PageContentWhereInput[]
  NOT?: Prisma.PageContentWhereInput | Prisma.PageContentWhereInput[]
  id?: Prisma.StringFilter<"PageContent"> | string
  heroSlider?: Prisma.JsonNullableFilter<"PageContent">
  gallery?: Prisma.JsonNullableFilter<"PageContent">
  welcomeAddress?: Prisma.JsonNullableFilter<"PageContent">
  ourGoals?: Prisma.JsonNullableFilter<"PageContent">
  statsCount?: Prisma.JsonNullableFilter<"PageContent">
}

export type PageContentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  heroSlider?: Prisma.SortOrderInput | Prisma.SortOrder
  gallery?: Prisma.SortOrderInput | Prisma.SortOrder
  welcomeAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  ourGoals?: Prisma.SortOrderInput | Prisma.SortOrder
  statsCount?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type PageContentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PageContentWhereInput | Prisma.PageContentWhereInput[]
  OR?: Prisma.PageContentWhereInput[]
  NOT?: Prisma.PageContentWhereInput | Prisma.PageContentWhereInput[]
  heroSlider?: Prisma.JsonNullableFilter<"PageContent">
  gallery?: Prisma.JsonNullableFilter<"PageContent">
  welcomeAddress?: Prisma.JsonNullableFilter<"PageContent">
  ourGoals?: Prisma.JsonNullableFilter<"PageContent">
  statsCount?: Prisma.JsonNullableFilter<"PageContent">
}, "id" | "id">

export type PageContentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  heroSlider?: Prisma.SortOrderInput | Prisma.SortOrder
  gallery?: Prisma.SortOrderInput | Prisma.SortOrder
  welcomeAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  ourGoals?: Prisma.SortOrderInput | Prisma.SortOrder
  statsCount?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.PageContentCountOrderByAggregateInput
  _max?: Prisma.PageContentMaxOrderByAggregateInput
  _min?: Prisma.PageContentMinOrderByAggregateInput
}

export type PageContentScalarWhereWithAggregatesInput = {
  AND?: Prisma.PageContentScalarWhereWithAggregatesInput | Prisma.PageContentScalarWhereWithAggregatesInput[]
  OR?: Prisma.PageContentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PageContentScalarWhereWithAggregatesInput | Prisma.PageContentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PageContent"> | string
  heroSlider?: Prisma.JsonNullableWithAggregatesFilter<"PageContent">
  gallery?: Prisma.JsonNullableWithAggregatesFilter<"PageContent">
  welcomeAddress?: Prisma.JsonNullableWithAggregatesFilter<"PageContent">
  ourGoals?: Prisma.JsonNullableWithAggregatesFilter<"PageContent">
  statsCount?: Prisma.JsonNullableWithAggregatesFilter<"PageContent">
}

export type PageContentCreateInput = {
  id?: string
  heroSlider?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  gallery?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  welcomeAddress?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ourGoals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  statsCount?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type PageContentUncheckedCreateInput = {
  id?: string
  heroSlider?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  gallery?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  welcomeAddress?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ourGoals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  statsCount?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type PageContentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  heroSlider?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  gallery?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  welcomeAddress?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ourGoals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  statsCount?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type PageContentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  heroSlider?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  gallery?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  welcomeAddress?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ourGoals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  statsCount?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type PageContentCreateManyInput = {
  id?: string
  heroSlider?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  gallery?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  welcomeAddress?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ourGoals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  statsCount?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type PageContentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  heroSlider?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  gallery?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  welcomeAddress?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ourGoals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  statsCount?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type PageContentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  heroSlider?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  gallery?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  welcomeAddress?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ourGoals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  statsCount?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type PageContentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  heroSlider?: Prisma.SortOrder
  gallery?: Prisma.SortOrder
  welcomeAddress?: Prisma.SortOrder
  ourGoals?: Prisma.SortOrder
  statsCount?: Prisma.SortOrder
}

export type PageContentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PageContentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type PageContentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  heroSlider?: boolean
  gallery?: boolean
  welcomeAddress?: boolean
  ourGoals?: boolean
  statsCount?: boolean
}, ExtArgs["result"]["pageContent"]>

export type PageContentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  heroSlider?: boolean
  gallery?: boolean
  welcomeAddress?: boolean
  ourGoals?: boolean
  statsCount?: boolean
}, ExtArgs["result"]["pageContent"]>

export type PageContentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  heroSlider?: boolean
  gallery?: boolean
  welcomeAddress?: boolean
  ourGoals?: boolean
  statsCount?: boolean
}, ExtArgs["result"]["pageContent"]>

export type PageContentSelectScalar = {
  id?: boolean
  heroSlider?: boolean
  gallery?: boolean
  welcomeAddress?: boolean
  ourGoals?: boolean
  statsCount?: boolean
}

export type PageContentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "heroSlider" | "gallery" | "welcomeAddress" | "ourGoals" | "statsCount", ExtArgs["result"]["pageContent"]>

export type $PageContentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PageContent"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    heroSlider: runtime.JsonValue | null
    gallery: runtime.JsonValue | null
    welcomeAddress: runtime.JsonValue | null
    ourGoals: runtime.JsonValue | null
    statsCount: runtime.JsonValue | null
  }, ExtArgs["result"]["pageContent"]>
  composites: {}
}

export type PageContentGetPayload<S extends boolean | null | undefined | PageContentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PageContentPayload, S>

export type PageContentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PageContentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PageContentCountAggregateInputType | true
  }

export interface PageContentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PageContent'], meta: { name: 'PageContent' } }
  /**
   * Find zero or one PageContent that matches the filter.
   * @param {PageContentFindUniqueArgs} args - Arguments to find a PageContent
   * @example
   * // Get one PageContent
   * const pageContent = await prisma.pageContent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PageContentFindUniqueArgs>(args: Prisma.SelectSubset<T, PageContentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PageContentClient<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PageContent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PageContentFindUniqueOrThrowArgs} args - Arguments to find a PageContent
   * @example
   * // Get one PageContent
   * const pageContent = await prisma.pageContent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PageContentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PageContentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PageContentClient<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PageContent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageContentFindFirstArgs} args - Arguments to find a PageContent
   * @example
   * // Get one PageContent
   * const pageContent = await prisma.pageContent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PageContentFindFirstArgs>(args?: Prisma.SelectSubset<T, PageContentFindFirstArgs<ExtArgs>>): Prisma.Prisma__PageContentClient<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PageContent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageContentFindFirstOrThrowArgs} args - Arguments to find a PageContent
   * @example
   * // Get one PageContent
   * const pageContent = await prisma.pageContent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PageContentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PageContentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PageContentClient<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PageContents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageContentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PageContents
   * const pageContents = await prisma.pageContent.findMany()
   * 
   * // Get first 10 PageContents
   * const pageContents = await prisma.pageContent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pageContentWithIdOnly = await prisma.pageContent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PageContentFindManyArgs>(args?: Prisma.SelectSubset<T, PageContentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PageContent.
   * @param {PageContentCreateArgs} args - Arguments to create a PageContent.
   * @example
   * // Create one PageContent
   * const PageContent = await prisma.pageContent.create({
   *   data: {
   *     // ... data to create a PageContent
   *   }
   * })
   * 
   */
  create<T extends PageContentCreateArgs>(args: Prisma.SelectSubset<T, PageContentCreateArgs<ExtArgs>>): Prisma.Prisma__PageContentClient<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PageContents.
   * @param {PageContentCreateManyArgs} args - Arguments to create many PageContents.
   * @example
   * // Create many PageContents
   * const pageContent = await prisma.pageContent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PageContentCreateManyArgs>(args?: Prisma.SelectSubset<T, PageContentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PageContents and returns the data saved in the database.
   * @param {PageContentCreateManyAndReturnArgs} args - Arguments to create many PageContents.
   * @example
   * // Create many PageContents
   * const pageContent = await prisma.pageContent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PageContents and only return the `id`
   * const pageContentWithIdOnly = await prisma.pageContent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PageContentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PageContentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PageContent.
   * @param {PageContentDeleteArgs} args - Arguments to delete one PageContent.
   * @example
   * // Delete one PageContent
   * const PageContent = await prisma.pageContent.delete({
   *   where: {
   *     // ... filter to delete one PageContent
   *   }
   * })
   * 
   */
  delete<T extends PageContentDeleteArgs>(args: Prisma.SelectSubset<T, PageContentDeleteArgs<ExtArgs>>): Prisma.Prisma__PageContentClient<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PageContent.
   * @param {PageContentUpdateArgs} args - Arguments to update one PageContent.
   * @example
   * // Update one PageContent
   * const pageContent = await prisma.pageContent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PageContentUpdateArgs>(args: Prisma.SelectSubset<T, PageContentUpdateArgs<ExtArgs>>): Prisma.Prisma__PageContentClient<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PageContents.
   * @param {PageContentDeleteManyArgs} args - Arguments to filter PageContents to delete.
   * @example
   * // Delete a few PageContents
   * const { count } = await prisma.pageContent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PageContentDeleteManyArgs>(args?: Prisma.SelectSubset<T, PageContentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PageContents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageContentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PageContents
   * const pageContent = await prisma.pageContent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PageContentUpdateManyArgs>(args: Prisma.SelectSubset<T, PageContentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PageContents and returns the data updated in the database.
   * @param {PageContentUpdateManyAndReturnArgs} args - Arguments to update many PageContents.
   * @example
   * // Update many PageContents
   * const pageContent = await prisma.pageContent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PageContents and only return the `id`
   * const pageContentWithIdOnly = await prisma.pageContent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PageContentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PageContentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PageContent.
   * @param {PageContentUpsertArgs} args - Arguments to update or create a PageContent.
   * @example
   * // Update or create a PageContent
   * const pageContent = await prisma.pageContent.upsert({
   *   create: {
   *     // ... data to create a PageContent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PageContent we want to update
   *   }
   * })
   */
  upsert<T extends PageContentUpsertArgs>(args: Prisma.SelectSubset<T, PageContentUpsertArgs<ExtArgs>>): Prisma.Prisma__PageContentClient<runtime.Types.Result.GetResult<Prisma.$PageContentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PageContents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageContentCountArgs} args - Arguments to filter PageContents to count.
   * @example
   * // Count the number of PageContents
   * const count = await prisma.pageContent.count({
   *   where: {
   *     // ... the filter for the PageContents we want to count
   *   }
   * })
  **/
  count<T extends PageContentCountArgs>(
    args?: Prisma.Subset<T, PageContentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PageContentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PageContent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PageContentAggregateArgs>(args: Prisma.Subset<T, PageContentAggregateArgs>): Prisma.PrismaPromise<GetPageContentAggregateType<T>>

  /**
   * Group by PageContent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageContentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PageContentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PageContentGroupByArgs['orderBy'] }
      : { orderBy?: PageContentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PageContentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageContentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PageContent model
 */
readonly fields: PageContentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PageContent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PageContentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PageContent model
 */
export interface PageContentFieldRefs {
  readonly id: Prisma.FieldRef<"PageContent", 'String'>
  readonly heroSlider: Prisma.FieldRef<"PageContent", 'Json'>
  readonly gallery: Prisma.FieldRef<"PageContent", 'Json'>
  readonly welcomeAddress: Prisma.FieldRef<"PageContent", 'Json'>
  readonly ourGoals: Prisma.FieldRef<"PageContent", 'Json'>
  readonly statsCount: Prisma.FieldRef<"PageContent", 'Json'>
}
    

// Custom InputTypes
/**
 * PageContent findUnique
 */
export type PageContentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * Filter, which PageContent to fetch.
   */
  where: Prisma.PageContentWhereUniqueInput
}

/**
 * PageContent findUniqueOrThrow
 */
export type PageContentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * Filter, which PageContent to fetch.
   */
  where: Prisma.PageContentWhereUniqueInput
}

/**
 * PageContent findFirst
 */
export type PageContentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * Filter, which PageContent to fetch.
   */
  where?: Prisma.PageContentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PageContents to fetch.
   */
  orderBy?: Prisma.PageContentOrderByWithRelationInput | Prisma.PageContentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PageContents.
   */
  cursor?: Prisma.PageContentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PageContents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PageContents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PageContents.
   */
  distinct?: Prisma.PageContentScalarFieldEnum | Prisma.PageContentScalarFieldEnum[]
}

/**
 * PageContent findFirstOrThrow
 */
export type PageContentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * Filter, which PageContent to fetch.
   */
  where?: Prisma.PageContentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PageContents to fetch.
   */
  orderBy?: Prisma.PageContentOrderByWithRelationInput | Prisma.PageContentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PageContents.
   */
  cursor?: Prisma.PageContentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PageContents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PageContents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PageContents.
   */
  distinct?: Prisma.PageContentScalarFieldEnum | Prisma.PageContentScalarFieldEnum[]
}

/**
 * PageContent findMany
 */
export type PageContentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * Filter, which PageContents to fetch.
   */
  where?: Prisma.PageContentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PageContents to fetch.
   */
  orderBy?: Prisma.PageContentOrderByWithRelationInput | Prisma.PageContentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PageContents.
   */
  cursor?: Prisma.PageContentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PageContents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PageContents.
   */
  skip?: number
  distinct?: Prisma.PageContentScalarFieldEnum | Prisma.PageContentScalarFieldEnum[]
}

/**
 * PageContent create
 */
export type PageContentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * The data needed to create a PageContent.
   */
  data?: Prisma.XOR<Prisma.PageContentCreateInput, Prisma.PageContentUncheckedCreateInput>
}

/**
 * PageContent createMany
 */
export type PageContentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PageContents.
   */
  data: Prisma.PageContentCreateManyInput | Prisma.PageContentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PageContent createManyAndReturn
 */
export type PageContentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * The data used to create many PageContents.
   */
  data: Prisma.PageContentCreateManyInput | Prisma.PageContentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PageContent update
 */
export type PageContentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * The data needed to update a PageContent.
   */
  data: Prisma.XOR<Prisma.PageContentUpdateInput, Prisma.PageContentUncheckedUpdateInput>
  /**
   * Choose, which PageContent to update.
   */
  where: Prisma.PageContentWhereUniqueInput
}

/**
 * PageContent updateMany
 */
export type PageContentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PageContents.
   */
  data: Prisma.XOR<Prisma.PageContentUpdateManyMutationInput, Prisma.PageContentUncheckedUpdateManyInput>
  /**
   * Filter which PageContents to update
   */
  where?: Prisma.PageContentWhereInput
  /**
   * Limit how many PageContents to update.
   */
  limit?: number
}

/**
 * PageContent updateManyAndReturn
 */
export type PageContentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * The data used to update PageContents.
   */
  data: Prisma.XOR<Prisma.PageContentUpdateManyMutationInput, Prisma.PageContentUncheckedUpdateManyInput>
  /**
   * Filter which PageContents to update
   */
  where?: Prisma.PageContentWhereInput
  /**
   * Limit how many PageContents to update.
   */
  limit?: number
}

/**
 * PageContent upsert
 */
export type PageContentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * The filter to search for the PageContent to update in case it exists.
   */
  where: Prisma.PageContentWhereUniqueInput
  /**
   * In case the PageContent found by the `where` argument doesn't exist, create a new PageContent with this data.
   */
  create: Prisma.XOR<Prisma.PageContentCreateInput, Prisma.PageContentUncheckedCreateInput>
  /**
   * In case the PageContent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PageContentUpdateInput, Prisma.PageContentUncheckedUpdateInput>
}

/**
 * PageContent delete
 */
export type PageContentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
  /**
   * Filter which PageContent to delete.
   */
  where: Prisma.PageContentWhereUniqueInput
}

/**
 * PageContent deleteMany
 */
export type PageContentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PageContents to delete
   */
  where?: Prisma.PageContentWhereInput
  /**
   * Limit how many PageContents to delete.
   */
  limit?: number
}

/**
 * PageContent without action
 */
export type PageContentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PageContent
   */
  select?: Prisma.PageContentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PageContent
   */
  omit?: Prisma.PageContentOmit<ExtArgs> | null
}
