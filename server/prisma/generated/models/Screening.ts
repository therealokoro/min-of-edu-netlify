
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Screening` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Screening
 * 
 */
export type ScreeningModel = runtime.Types.Result.DefaultSelection<Prisma.$ScreeningPayload>

export type AggregateScreening = {
  _count: ScreeningCountAggregateOutputType | null
  _min: ScreeningMinAggregateOutputType | null
  _max: ScreeningMaxAggregateOutputType | null
}

export type ScreeningMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  requirements: string | null
  deadline: Date | null
  createdAt: Date | null
}

export type ScreeningMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  requirements: string | null
  deadline: Date | null
  createdAt: Date | null
}

export type ScreeningCountAggregateOutputType = {
  id: number
  title: number
  description: number
  requirements: number
  deadline: number
  createdAt: number
  _all: number
}


export type ScreeningMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  requirements?: true
  deadline?: true
  createdAt?: true
}

export type ScreeningMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  requirements?: true
  deadline?: true
  createdAt?: true
}

export type ScreeningCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  requirements?: true
  deadline?: true
  createdAt?: true
  _all?: true
}

export type ScreeningAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Screening to aggregate.
   */
  where?: Prisma.ScreeningWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Screenings to fetch.
   */
  orderBy?: Prisma.ScreeningOrderByWithRelationInput | Prisma.ScreeningOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ScreeningWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Screenings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Screenings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Screenings
  **/
  _count?: true | ScreeningCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ScreeningMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ScreeningMaxAggregateInputType
}

export type GetScreeningAggregateType<T extends ScreeningAggregateArgs> = {
      [P in keyof T & keyof AggregateScreening]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateScreening[P]>
    : Prisma.GetScalarType<T[P], AggregateScreening[P]>
}




export type ScreeningGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScreeningWhereInput
  orderBy?: Prisma.ScreeningOrderByWithAggregationInput | Prisma.ScreeningOrderByWithAggregationInput[]
  by: Prisma.ScreeningScalarFieldEnum[] | Prisma.ScreeningScalarFieldEnum
  having?: Prisma.ScreeningScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ScreeningCountAggregateInputType | true
  _min?: ScreeningMinAggregateInputType
  _max?: ScreeningMaxAggregateInputType
}

export type ScreeningGroupByOutputType = {
  id: string
  title: string
  description: string | null
  requirements: string
  deadline: Date
  createdAt: Date
  _count: ScreeningCountAggregateOutputType | null
  _min: ScreeningMinAggregateOutputType | null
  _max: ScreeningMaxAggregateOutputType | null
}

type GetScreeningGroupByPayload<T extends ScreeningGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScreeningGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ScreeningGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScreeningGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScreeningGroupByOutputType[P]>
      }
    >
  >



export type ScreeningWhereInput = {
  AND?: Prisma.ScreeningWhereInput | Prisma.ScreeningWhereInput[]
  OR?: Prisma.ScreeningWhereInput[]
  NOT?: Prisma.ScreeningWhereInput | Prisma.ScreeningWhereInput[]
  id?: Prisma.StringFilter<"Screening"> | string
  title?: Prisma.StringFilter<"Screening"> | string
  description?: Prisma.StringNullableFilter<"Screening"> | string | null
  requirements?: Prisma.StringFilter<"Screening"> | string
  deadline?: Prisma.DateTimeFilter<"Screening"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Screening"> | Date | string
  entries?: Prisma.ScreeningEntryListRelationFilter
}

export type ScreeningOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  entries?: Prisma.ScreeningEntryOrderByRelationAggregateInput
}

export type ScreeningWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  title?: string
  AND?: Prisma.ScreeningWhereInput | Prisma.ScreeningWhereInput[]
  OR?: Prisma.ScreeningWhereInput[]
  NOT?: Prisma.ScreeningWhereInput | Prisma.ScreeningWhereInput[]
  description?: Prisma.StringNullableFilter<"Screening"> | string | null
  requirements?: Prisma.StringFilter<"Screening"> | string
  deadline?: Prisma.DateTimeFilter<"Screening"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Screening"> | Date | string
  entries?: Prisma.ScreeningEntryListRelationFilter
}, "id" | "id" | "title">

export type ScreeningOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ScreeningCountOrderByAggregateInput
  _max?: Prisma.ScreeningMaxOrderByAggregateInput
  _min?: Prisma.ScreeningMinOrderByAggregateInput
}

export type ScreeningScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScreeningScalarWhereWithAggregatesInput | Prisma.ScreeningScalarWhereWithAggregatesInput[]
  OR?: Prisma.ScreeningScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ScreeningScalarWhereWithAggregatesInput | Prisma.ScreeningScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Screening"> | string
  title?: Prisma.StringWithAggregatesFilter<"Screening"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Screening"> | string | null
  requirements?: Prisma.StringWithAggregatesFilter<"Screening"> | string
  deadline?: Prisma.DateTimeWithAggregatesFilter<"Screening"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Screening"> | Date | string
}

export type ScreeningCreateInput = {
  id?: string
  title: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
  entries?: Prisma.ScreeningEntryCreateNestedManyWithoutScreeningInput
}

export type ScreeningUncheckedCreateInput = {
  id?: string
  title: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
  entries?: Prisma.ScreeningEntryUncheckedCreateNestedManyWithoutScreeningInput
}

export type ScreeningUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  entries?: Prisma.ScreeningEntryUpdateManyWithoutScreeningNestedInput
}

export type ScreeningUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  entries?: Prisma.ScreeningEntryUncheckedUpdateManyWithoutScreeningNestedInput
}

export type ScreeningCreateManyInput = {
  id?: string
  title: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
}

export type ScreeningUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScreeningUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScreeningCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScreeningMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScreeningMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  requirements?: Prisma.SortOrder
  deadline?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScreeningScalarRelationFilter = {
  is?: Prisma.ScreeningWhereInput
  isNot?: Prisma.ScreeningWhereInput
}

export type ScreeningCreateNestedOneWithoutEntriesInput = {
  create?: Prisma.XOR<Prisma.ScreeningCreateWithoutEntriesInput, Prisma.ScreeningUncheckedCreateWithoutEntriesInput>
  connectOrCreate?: Prisma.ScreeningCreateOrConnectWithoutEntriesInput
  connect?: Prisma.ScreeningWhereUniqueInput
}

export type ScreeningUpdateOneRequiredWithoutEntriesNestedInput = {
  create?: Prisma.XOR<Prisma.ScreeningCreateWithoutEntriesInput, Prisma.ScreeningUncheckedCreateWithoutEntriesInput>
  connectOrCreate?: Prisma.ScreeningCreateOrConnectWithoutEntriesInput
  upsert?: Prisma.ScreeningUpsertWithoutEntriesInput
  connect?: Prisma.ScreeningWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ScreeningUpdateToOneWithWhereWithoutEntriesInput, Prisma.ScreeningUpdateWithoutEntriesInput>, Prisma.ScreeningUncheckedUpdateWithoutEntriesInput>
}

export type ScreeningCreateWithoutEntriesInput = {
  id?: string
  title: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
}

export type ScreeningUncheckedCreateWithoutEntriesInput = {
  id?: string
  title: string
  description?: string | null
  requirements: string
  deadline: Date | string
  createdAt?: Date | string
}

export type ScreeningCreateOrConnectWithoutEntriesInput = {
  where: Prisma.ScreeningWhereUniqueInput
  create: Prisma.XOR<Prisma.ScreeningCreateWithoutEntriesInput, Prisma.ScreeningUncheckedCreateWithoutEntriesInput>
}

export type ScreeningUpsertWithoutEntriesInput = {
  update: Prisma.XOR<Prisma.ScreeningUpdateWithoutEntriesInput, Prisma.ScreeningUncheckedUpdateWithoutEntriesInput>
  create: Prisma.XOR<Prisma.ScreeningCreateWithoutEntriesInput, Prisma.ScreeningUncheckedCreateWithoutEntriesInput>
  where?: Prisma.ScreeningWhereInput
}

export type ScreeningUpdateToOneWithWhereWithoutEntriesInput = {
  where?: Prisma.ScreeningWhereInput
  data: Prisma.XOR<Prisma.ScreeningUpdateWithoutEntriesInput, Prisma.ScreeningUncheckedUpdateWithoutEntriesInput>
}

export type ScreeningUpdateWithoutEntriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScreeningUncheckedUpdateWithoutEntriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requirements?: Prisma.StringFieldUpdateOperationsInput | string
  deadline?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ScreeningCountOutputType
 */

export type ScreeningCountOutputType = {
  entries: number
}

export type ScreeningCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  entries?: boolean | ScreeningCountOutputTypeCountEntriesArgs
}

/**
 * ScreeningCountOutputType without action
 */
export type ScreeningCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningCountOutputType
   */
  select?: Prisma.ScreeningCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ScreeningCountOutputType without action
 */
export type ScreeningCountOutputTypeCountEntriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScreeningEntryWhereInput
}


export type ScreeningSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  requirements?: boolean
  deadline?: boolean
  createdAt?: boolean
  entries?: boolean | Prisma.Screening$entriesArgs<ExtArgs>
  _count?: boolean | Prisma.ScreeningCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["screening"]>

export type ScreeningSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  requirements?: boolean
  deadline?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["screening"]>

export type ScreeningSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  requirements?: boolean
  deadline?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["screening"]>

export type ScreeningSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  requirements?: boolean
  deadline?: boolean
  createdAt?: boolean
}

export type ScreeningOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "requirements" | "deadline" | "createdAt", ExtArgs["result"]["screening"]>
export type ScreeningInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  entries?: boolean | Prisma.Screening$entriesArgs<ExtArgs>
  _count?: boolean | Prisma.ScreeningCountOutputTypeDefaultArgs<ExtArgs>
}
export type ScreeningIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ScreeningIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ScreeningPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Screening"
  objects: {
    entries: Prisma.$ScreeningEntryPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string | null
    requirements: string
    deadline: Date
    createdAt: Date
  }, ExtArgs["result"]["screening"]>
  composites: {}
}

export type ScreeningGetPayload<S extends boolean | null | undefined | ScreeningDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ScreeningPayload, S>

export type ScreeningCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ScreeningFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ScreeningCountAggregateInputType | true
  }

export interface ScreeningDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Screening'], meta: { name: 'Screening' } }
  /**
   * Find zero or one Screening that matches the filter.
   * @param {ScreeningFindUniqueArgs} args - Arguments to find a Screening
   * @example
   * // Get one Screening
   * const screening = await prisma.screening.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScreeningFindUniqueArgs>(args: Prisma.SelectSubset<T, ScreeningFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ScreeningClient<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Screening that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScreeningFindUniqueOrThrowArgs} args - Arguments to find a Screening
   * @example
   * // Get one Screening
   * const screening = await prisma.screening.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScreeningFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ScreeningFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScreeningClient<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Screening that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningFindFirstArgs} args - Arguments to find a Screening
   * @example
   * // Get one Screening
   * const screening = await prisma.screening.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScreeningFindFirstArgs>(args?: Prisma.SelectSubset<T, ScreeningFindFirstArgs<ExtArgs>>): Prisma.Prisma__ScreeningClient<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Screening that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningFindFirstOrThrowArgs} args - Arguments to find a Screening
   * @example
   * // Get one Screening
   * const screening = await prisma.screening.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScreeningFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ScreeningFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScreeningClient<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Screenings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Screenings
   * const screenings = await prisma.screening.findMany()
   * 
   * // Get first 10 Screenings
   * const screenings = await prisma.screening.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const screeningWithIdOnly = await prisma.screening.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ScreeningFindManyArgs>(args?: Prisma.SelectSubset<T, ScreeningFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Screening.
   * @param {ScreeningCreateArgs} args - Arguments to create a Screening.
   * @example
   * // Create one Screening
   * const Screening = await prisma.screening.create({
   *   data: {
   *     // ... data to create a Screening
   *   }
   * })
   * 
   */
  create<T extends ScreeningCreateArgs>(args: Prisma.SelectSubset<T, ScreeningCreateArgs<ExtArgs>>): Prisma.Prisma__ScreeningClient<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Screenings.
   * @param {ScreeningCreateManyArgs} args - Arguments to create many Screenings.
   * @example
   * // Create many Screenings
   * const screening = await prisma.screening.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ScreeningCreateManyArgs>(args?: Prisma.SelectSubset<T, ScreeningCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Screenings and returns the data saved in the database.
   * @param {ScreeningCreateManyAndReturnArgs} args - Arguments to create many Screenings.
   * @example
   * // Create many Screenings
   * const screening = await prisma.screening.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Screenings and only return the `id`
   * const screeningWithIdOnly = await prisma.screening.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ScreeningCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ScreeningCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Screening.
   * @param {ScreeningDeleteArgs} args - Arguments to delete one Screening.
   * @example
   * // Delete one Screening
   * const Screening = await prisma.screening.delete({
   *   where: {
   *     // ... filter to delete one Screening
   *   }
   * })
   * 
   */
  delete<T extends ScreeningDeleteArgs>(args: Prisma.SelectSubset<T, ScreeningDeleteArgs<ExtArgs>>): Prisma.Prisma__ScreeningClient<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Screening.
   * @param {ScreeningUpdateArgs} args - Arguments to update one Screening.
   * @example
   * // Update one Screening
   * const screening = await prisma.screening.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ScreeningUpdateArgs>(args: Prisma.SelectSubset<T, ScreeningUpdateArgs<ExtArgs>>): Prisma.Prisma__ScreeningClient<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Screenings.
   * @param {ScreeningDeleteManyArgs} args - Arguments to filter Screenings to delete.
   * @example
   * // Delete a few Screenings
   * const { count } = await prisma.screening.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ScreeningDeleteManyArgs>(args?: Prisma.SelectSubset<T, ScreeningDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Screenings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Screenings
   * const screening = await prisma.screening.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ScreeningUpdateManyArgs>(args: Prisma.SelectSubset<T, ScreeningUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Screenings and returns the data updated in the database.
   * @param {ScreeningUpdateManyAndReturnArgs} args - Arguments to update many Screenings.
   * @example
   * // Update many Screenings
   * const screening = await prisma.screening.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Screenings and only return the `id`
   * const screeningWithIdOnly = await prisma.screening.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ScreeningUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ScreeningUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Screening.
   * @param {ScreeningUpsertArgs} args - Arguments to update or create a Screening.
   * @example
   * // Update or create a Screening
   * const screening = await prisma.screening.upsert({
   *   create: {
   *     // ... data to create a Screening
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Screening we want to update
   *   }
   * })
   */
  upsert<T extends ScreeningUpsertArgs>(args: Prisma.SelectSubset<T, ScreeningUpsertArgs<ExtArgs>>): Prisma.Prisma__ScreeningClient<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Screenings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningCountArgs} args - Arguments to filter Screenings to count.
   * @example
   * // Count the number of Screenings
   * const count = await prisma.screening.count({
   *   where: {
   *     // ... the filter for the Screenings we want to count
   *   }
   * })
  **/
  count<T extends ScreeningCountArgs>(
    args?: Prisma.Subset<T, ScreeningCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ScreeningCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Screening.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ScreeningAggregateArgs>(args: Prisma.Subset<T, ScreeningAggregateArgs>): Prisma.PrismaPromise<GetScreeningAggregateType<T>>

  /**
   * Group by Screening.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ScreeningGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScreeningGroupByArgs['orderBy'] }
      : { orderBy?: ScreeningGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ScreeningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScreeningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Screening model
 */
readonly fields: ScreeningFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Screening.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScreeningClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  entries<T extends Prisma.Screening$entriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Screening$entriesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Screening model
 */
export interface ScreeningFieldRefs {
  readonly id: Prisma.FieldRef<"Screening", 'String'>
  readonly title: Prisma.FieldRef<"Screening", 'String'>
  readonly description: Prisma.FieldRef<"Screening", 'String'>
  readonly requirements: Prisma.FieldRef<"Screening", 'String'>
  readonly deadline: Prisma.FieldRef<"Screening", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Screening", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Screening findUnique
 */
export type ScreeningFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
  /**
   * Filter, which Screening to fetch.
   */
  where: Prisma.ScreeningWhereUniqueInput
}

/**
 * Screening findUniqueOrThrow
 */
export type ScreeningFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
  /**
   * Filter, which Screening to fetch.
   */
  where: Prisma.ScreeningWhereUniqueInput
}

/**
 * Screening findFirst
 */
export type ScreeningFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
  /**
   * Filter, which Screening to fetch.
   */
  where?: Prisma.ScreeningWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Screenings to fetch.
   */
  orderBy?: Prisma.ScreeningOrderByWithRelationInput | Prisma.ScreeningOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Screenings.
   */
  cursor?: Prisma.ScreeningWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Screenings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Screenings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Screenings.
   */
  distinct?: Prisma.ScreeningScalarFieldEnum | Prisma.ScreeningScalarFieldEnum[]
}

/**
 * Screening findFirstOrThrow
 */
export type ScreeningFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
  /**
   * Filter, which Screening to fetch.
   */
  where?: Prisma.ScreeningWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Screenings to fetch.
   */
  orderBy?: Prisma.ScreeningOrderByWithRelationInput | Prisma.ScreeningOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Screenings.
   */
  cursor?: Prisma.ScreeningWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Screenings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Screenings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Screenings.
   */
  distinct?: Prisma.ScreeningScalarFieldEnum | Prisma.ScreeningScalarFieldEnum[]
}

/**
 * Screening findMany
 */
export type ScreeningFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
  /**
   * Filter, which Screenings to fetch.
   */
  where?: Prisma.ScreeningWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Screenings to fetch.
   */
  orderBy?: Prisma.ScreeningOrderByWithRelationInput | Prisma.ScreeningOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Screenings.
   */
  cursor?: Prisma.ScreeningWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Screenings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Screenings.
   */
  skip?: number
  distinct?: Prisma.ScreeningScalarFieldEnum | Prisma.ScreeningScalarFieldEnum[]
}

/**
 * Screening create
 */
export type ScreeningCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
  /**
   * The data needed to create a Screening.
   */
  data: Prisma.XOR<Prisma.ScreeningCreateInput, Prisma.ScreeningUncheckedCreateInput>
}

/**
 * Screening createMany
 */
export type ScreeningCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Screenings.
   */
  data: Prisma.ScreeningCreateManyInput | Prisma.ScreeningCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Screening createManyAndReturn
 */
export type ScreeningCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * The data used to create many Screenings.
   */
  data: Prisma.ScreeningCreateManyInput | Prisma.ScreeningCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Screening update
 */
export type ScreeningUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
  /**
   * The data needed to update a Screening.
   */
  data: Prisma.XOR<Prisma.ScreeningUpdateInput, Prisma.ScreeningUncheckedUpdateInput>
  /**
   * Choose, which Screening to update.
   */
  where: Prisma.ScreeningWhereUniqueInput
}

/**
 * Screening updateMany
 */
export type ScreeningUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Screenings.
   */
  data: Prisma.XOR<Prisma.ScreeningUpdateManyMutationInput, Prisma.ScreeningUncheckedUpdateManyInput>
  /**
   * Filter which Screenings to update
   */
  where?: Prisma.ScreeningWhereInput
  /**
   * Limit how many Screenings to update.
   */
  limit?: number
}

/**
 * Screening updateManyAndReturn
 */
export type ScreeningUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * The data used to update Screenings.
   */
  data: Prisma.XOR<Prisma.ScreeningUpdateManyMutationInput, Prisma.ScreeningUncheckedUpdateManyInput>
  /**
   * Filter which Screenings to update
   */
  where?: Prisma.ScreeningWhereInput
  /**
   * Limit how many Screenings to update.
   */
  limit?: number
}

/**
 * Screening upsert
 */
export type ScreeningUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
  /**
   * The filter to search for the Screening to update in case it exists.
   */
  where: Prisma.ScreeningWhereUniqueInput
  /**
   * In case the Screening found by the `where` argument doesn't exist, create a new Screening with this data.
   */
  create: Prisma.XOR<Prisma.ScreeningCreateInput, Prisma.ScreeningUncheckedCreateInput>
  /**
   * In case the Screening was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScreeningUpdateInput, Prisma.ScreeningUncheckedUpdateInput>
}

/**
 * Screening delete
 */
export type ScreeningDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
  /**
   * Filter which Screening to delete.
   */
  where: Prisma.ScreeningWhereUniqueInput
}

/**
 * Screening deleteMany
 */
export type ScreeningDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Screenings to delete
   */
  where?: Prisma.ScreeningWhereInput
  /**
   * Limit how many Screenings to delete.
   */
  limit?: number
}

/**
 * Screening.entries
 */
export type Screening$entriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  where?: Prisma.ScreeningEntryWhereInput
  orderBy?: Prisma.ScreeningEntryOrderByWithRelationInput | Prisma.ScreeningEntryOrderByWithRelationInput[]
  cursor?: Prisma.ScreeningEntryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ScreeningEntryScalarFieldEnum | Prisma.ScreeningEntryScalarFieldEnum[]
}

/**
 * Screening without action
 */
export type ScreeningDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screening
   */
  select?: Prisma.ScreeningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screening
   */
  omit?: Prisma.ScreeningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningInclude<ExtArgs> | null
}
