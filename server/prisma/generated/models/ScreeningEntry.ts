
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ScreeningEntry` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ScreeningEntry
 * 
 */
export type ScreeningEntryModel = runtime.Types.Result.DefaultSelection<Prisma.$ScreeningEntryPayload>

export type AggregateScreeningEntry = {
  _count: ScreeningEntryCountAggregateOutputType | null
  _min: ScreeningEntryMinAggregateOutputType | null
  _max: ScreeningEntryMaxAggregateOutputType | null
}

export type ScreeningEntryMinAggregateOutputType = {
  id: string | null
  staffId: string | null
  status: string | null
  message: string | null
  screeningId: string | null
}

export type ScreeningEntryMaxAggregateOutputType = {
  id: string | null
  staffId: string | null
  status: string | null
  message: string | null
  screeningId: string | null
}

export type ScreeningEntryCountAggregateOutputType = {
  id: number
  staffId: number
  status: number
  message: number
  screeningId: number
  uploadedFiles: number
  _all: number
}


export type ScreeningEntryMinAggregateInputType = {
  id?: true
  staffId?: true
  status?: true
  message?: true
  screeningId?: true
}

export type ScreeningEntryMaxAggregateInputType = {
  id?: true
  staffId?: true
  status?: true
  message?: true
  screeningId?: true
}

export type ScreeningEntryCountAggregateInputType = {
  id?: true
  staffId?: true
  status?: true
  message?: true
  screeningId?: true
  uploadedFiles?: true
  _all?: true
}

export type ScreeningEntryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ScreeningEntry to aggregate.
   */
  where?: Prisma.ScreeningEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScreeningEntries to fetch.
   */
  orderBy?: Prisma.ScreeningEntryOrderByWithRelationInput | Prisma.ScreeningEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ScreeningEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScreeningEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScreeningEntries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ScreeningEntries
  **/
  _count?: true | ScreeningEntryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ScreeningEntryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ScreeningEntryMaxAggregateInputType
}

export type GetScreeningEntryAggregateType<T extends ScreeningEntryAggregateArgs> = {
      [P in keyof T & keyof AggregateScreeningEntry]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateScreeningEntry[P]>
    : Prisma.GetScalarType<T[P], AggregateScreeningEntry[P]>
}




export type ScreeningEntryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScreeningEntryWhereInput
  orderBy?: Prisma.ScreeningEntryOrderByWithAggregationInput | Prisma.ScreeningEntryOrderByWithAggregationInput[]
  by: Prisma.ScreeningEntryScalarFieldEnum[] | Prisma.ScreeningEntryScalarFieldEnum
  having?: Prisma.ScreeningEntryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ScreeningEntryCountAggregateInputType | true
  _min?: ScreeningEntryMinAggregateInputType
  _max?: ScreeningEntryMaxAggregateInputType
}

export type ScreeningEntryGroupByOutputType = {
  id: string
  staffId: string
  status: string | null
  message: string | null
  screeningId: string
  uploadedFiles: runtime.JsonValue
  _count: ScreeningEntryCountAggregateOutputType | null
  _min: ScreeningEntryMinAggregateOutputType | null
  _max: ScreeningEntryMaxAggregateOutputType | null
}

type GetScreeningEntryGroupByPayload<T extends ScreeningEntryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScreeningEntryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ScreeningEntryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScreeningEntryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScreeningEntryGroupByOutputType[P]>
      }
    >
  >



export type ScreeningEntryWhereInput = {
  AND?: Prisma.ScreeningEntryWhereInput | Prisma.ScreeningEntryWhereInput[]
  OR?: Prisma.ScreeningEntryWhereInput[]
  NOT?: Prisma.ScreeningEntryWhereInput | Prisma.ScreeningEntryWhereInput[]
  id?: Prisma.StringFilter<"ScreeningEntry"> | string
  staffId?: Prisma.StringFilter<"ScreeningEntry"> | string
  status?: Prisma.StringNullableFilter<"ScreeningEntry"> | string | null
  message?: Prisma.StringNullableFilter<"ScreeningEntry"> | string | null
  screeningId?: Prisma.StringFilter<"ScreeningEntry"> | string
  uploadedFiles?: Prisma.JsonFilter<"ScreeningEntry">
  staff?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  screening?: Prisma.XOR<Prisma.ScreeningScalarRelationFilter, Prisma.ScreeningWhereInput>
}

export type ScreeningEntryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  status?: Prisma.SortOrderInput | Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  screeningId?: Prisma.SortOrder
  uploadedFiles?: Prisma.SortOrder
  staff?: Prisma.UserOrderByWithRelationInput
  screening?: Prisma.ScreeningOrderByWithRelationInput
}

export type ScreeningEntryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  staffId_screeningId?: Prisma.ScreeningEntryStaffIdScreeningIdCompoundUniqueInput
  AND?: Prisma.ScreeningEntryWhereInput | Prisma.ScreeningEntryWhereInput[]
  OR?: Prisma.ScreeningEntryWhereInput[]
  NOT?: Prisma.ScreeningEntryWhereInput | Prisma.ScreeningEntryWhereInput[]
  staffId?: Prisma.StringFilter<"ScreeningEntry"> | string
  status?: Prisma.StringNullableFilter<"ScreeningEntry"> | string | null
  message?: Prisma.StringNullableFilter<"ScreeningEntry"> | string | null
  screeningId?: Prisma.StringFilter<"ScreeningEntry"> | string
  uploadedFiles?: Prisma.JsonFilter<"ScreeningEntry">
  staff?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  screening?: Prisma.XOR<Prisma.ScreeningScalarRelationFilter, Prisma.ScreeningWhereInput>
}, "id" | "id" | "staffId_screeningId">

export type ScreeningEntryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  status?: Prisma.SortOrderInput | Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  screeningId?: Prisma.SortOrder
  uploadedFiles?: Prisma.SortOrder
  _count?: Prisma.ScreeningEntryCountOrderByAggregateInput
  _max?: Prisma.ScreeningEntryMaxOrderByAggregateInput
  _min?: Prisma.ScreeningEntryMinOrderByAggregateInput
}

export type ScreeningEntryScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScreeningEntryScalarWhereWithAggregatesInput | Prisma.ScreeningEntryScalarWhereWithAggregatesInput[]
  OR?: Prisma.ScreeningEntryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ScreeningEntryScalarWhereWithAggregatesInput | Prisma.ScreeningEntryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ScreeningEntry"> | string
  staffId?: Prisma.StringWithAggregatesFilter<"ScreeningEntry"> | string
  status?: Prisma.StringNullableWithAggregatesFilter<"ScreeningEntry"> | string | null
  message?: Prisma.StringNullableWithAggregatesFilter<"ScreeningEntry"> | string | null
  screeningId?: Prisma.StringWithAggregatesFilter<"ScreeningEntry"> | string
  uploadedFiles?: Prisma.JsonWithAggregatesFilter<"ScreeningEntry">
}

export type ScreeningEntryCreateInput = {
  id?: string
  status?: string | null
  message?: string | null
  uploadedFiles: Prisma.JsonNullValueInput | runtime.InputJsonValue
  staff: Prisma.UserCreateNestedOneWithoutScreeningEntriesInput
  screening: Prisma.ScreeningCreateNestedOneWithoutEntriesInput
}

export type ScreeningEntryUncheckedCreateInput = {
  id?: string
  staffId: string
  status?: string | null
  message?: string | null
  screeningId: string
  uploadedFiles: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  staff?: Prisma.UserUpdateOneRequiredWithoutScreeningEntriesNestedInput
  screening?: Prisma.ScreeningUpdateOneRequiredWithoutEntriesNestedInput
}

export type ScreeningEntryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screeningId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryCreateManyInput = {
  id?: string
  staffId: string
  status?: string | null
  message?: string | null
  screeningId: string
  uploadedFiles: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screeningId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryListRelationFilter = {
  every?: Prisma.ScreeningEntryWhereInput
  some?: Prisma.ScreeningEntryWhereInput
  none?: Prisma.ScreeningEntryWhereInput
}

export type ScreeningEntryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ScreeningEntryStaffIdScreeningIdCompoundUniqueInput = {
  staffId: string
  screeningId: string
}

export type ScreeningEntryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrder
  screeningId?: Prisma.SortOrder
  uploadedFiles?: Prisma.SortOrder
}

export type ScreeningEntryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrder
  screeningId?: Prisma.SortOrder
}

export type ScreeningEntryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrder
  screeningId?: Prisma.SortOrder
}

export type ScreeningEntryCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutStaffInput, Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput> | Prisma.ScreeningEntryCreateWithoutStaffInput[] | Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.ScreeningEntryCreateOrConnectWithoutStaffInput | Prisma.ScreeningEntryCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.ScreeningEntryCreateManyStaffInputEnvelope
  connect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
}

export type ScreeningEntryUncheckedCreateNestedManyWithoutStaffInput = {
  create?: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutStaffInput, Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput> | Prisma.ScreeningEntryCreateWithoutStaffInput[] | Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.ScreeningEntryCreateOrConnectWithoutStaffInput | Prisma.ScreeningEntryCreateOrConnectWithoutStaffInput[]
  createMany?: Prisma.ScreeningEntryCreateManyStaffInputEnvelope
  connect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
}

export type ScreeningEntryUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutStaffInput, Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput> | Prisma.ScreeningEntryCreateWithoutStaffInput[] | Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.ScreeningEntryCreateOrConnectWithoutStaffInput | Prisma.ScreeningEntryCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.ScreeningEntryUpsertWithWhereUniqueWithoutStaffInput | Prisma.ScreeningEntryUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.ScreeningEntryCreateManyStaffInputEnvelope
  set?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  disconnect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  delete?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  connect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  update?: Prisma.ScreeningEntryUpdateWithWhereUniqueWithoutStaffInput | Prisma.ScreeningEntryUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.ScreeningEntryUpdateManyWithWhereWithoutStaffInput | Prisma.ScreeningEntryUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.ScreeningEntryScalarWhereInput | Prisma.ScreeningEntryScalarWhereInput[]
}

export type ScreeningEntryUncheckedUpdateManyWithoutStaffNestedInput = {
  create?: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutStaffInput, Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput> | Prisma.ScreeningEntryCreateWithoutStaffInput[] | Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput[]
  connectOrCreate?: Prisma.ScreeningEntryCreateOrConnectWithoutStaffInput | Prisma.ScreeningEntryCreateOrConnectWithoutStaffInput[]
  upsert?: Prisma.ScreeningEntryUpsertWithWhereUniqueWithoutStaffInput | Prisma.ScreeningEntryUpsertWithWhereUniqueWithoutStaffInput[]
  createMany?: Prisma.ScreeningEntryCreateManyStaffInputEnvelope
  set?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  disconnect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  delete?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  connect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  update?: Prisma.ScreeningEntryUpdateWithWhereUniqueWithoutStaffInput | Prisma.ScreeningEntryUpdateWithWhereUniqueWithoutStaffInput[]
  updateMany?: Prisma.ScreeningEntryUpdateManyWithWhereWithoutStaffInput | Prisma.ScreeningEntryUpdateManyWithWhereWithoutStaffInput[]
  deleteMany?: Prisma.ScreeningEntryScalarWhereInput | Prisma.ScreeningEntryScalarWhereInput[]
}

export type ScreeningEntryCreateNestedManyWithoutScreeningInput = {
  create?: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutScreeningInput, Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput> | Prisma.ScreeningEntryCreateWithoutScreeningInput[] | Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput[]
  connectOrCreate?: Prisma.ScreeningEntryCreateOrConnectWithoutScreeningInput | Prisma.ScreeningEntryCreateOrConnectWithoutScreeningInput[]
  createMany?: Prisma.ScreeningEntryCreateManyScreeningInputEnvelope
  connect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
}

export type ScreeningEntryUncheckedCreateNestedManyWithoutScreeningInput = {
  create?: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutScreeningInput, Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput> | Prisma.ScreeningEntryCreateWithoutScreeningInput[] | Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput[]
  connectOrCreate?: Prisma.ScreeningEntryCreateOrConnectWithoutScreeningInput | Prisma.ScreeningEntryCreateOrConnectWithoutScreeningInput[]
  createMany?: Prisma.ScreeningEntryCreateManyScreeningInputEnvelope
  connect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
}

export type ScreeningEntryUpdateManyWithoutScreeningNestedInput = {
  create?: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutScreeningInput, Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput> | Prisma.ScreeningEntryCreateWithoutScreeningInput[] | Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput[]
  connectOrCreate?: Prisma.ScreeningEntryCreateOrConnectWithoutScreeningInput | Prisma.ScreeningEntryCreateOrConnectWithoutScreeningInput[]
  upsert?: Prisma.ScreeningEntryUpsertWithWhereUniqueWithoutScreeningInput | Prisma.ScreeningEntryUpsertWithWhereUniqueWithoutScreeningInput[]
  createMany?: Prisma.ScreeningEntryCreateManyScreeningInputEnvelope
  set?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  disconnect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  delete?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  connect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  update?: Prisma.ScreeningEntryUpdateWithWhereUniqueWithoutScreeningInput | Prisma.ScreeningEntryUpdateWithWhereUniqueWithoutScreeningInput[]
  updateMany?: Prisma.ScreeningEntryUpdateManyWithWhereWithoutScreeningInput | Prisma.ScreeningEntryUpdateManyWithWhereWithoutScreeningInput[]
  deleteMany?: Prisma.ScreeningEntryScalarWhereInput | Prisma.ScreeningEntryScalarWhereInput[]
}

export type ScreeningEntryUncheckedUpdateManyWithoutScreeningNestedInput = {
  create?: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutScreeningInput, Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput> | Prisma.ScreeningEntryCreateWithoutScreeningInput[] | Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput[]
  connectOrCreate?: Prisma.ScreeningEntryCreateOrConnectWithoutScreeningInput | Prisma.ScreeningEntryCreateOrConnectWithoutScreeningInput[]
  upsert?: Prisma.ScreeningEntryUpsertWithWhereUniqueWithoutScreeningInput | Prisma.ScreeningEntryUpsertWithWhereUniqueWithoutScreeningInput[]
  createMany?: Prisma.ScreeningEntryCreateManyScreeningInputEnvelope
  set?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  disconnect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  delete?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  connect?: Prisma.ScreeningEntryWhereUniqueInput | Prisma.ScreeningEntryWhereUniqueInput[]
  update?: Prisma.ScreeningEntryUpdateWithWhereUniqueWithoutScreeningInput | Prisma.ScreeningEntryUpdateWithWhereUniqueWithoutScreeningInput[]
  updateMany?: Prisma.ScreeningEntryUpdateManyWithWhereWithoutScreeningInput | Prisma.ScreeningEntryUpdateManyWithWhereWithoutScreeningInput[]
  deleteMany?: Prisma.ScreeningEntryScalarWhereInput | Prisma.ScreeningEntryScalarWhereInput[]
}

export type ScreeningEntryCreateWithoutStaffInput = {
  id?: string
  status?: string | null
  message?: string | null
  uploadedFiles: Prisma.JsonNullValueInput | runtime.InputJsonValue
  screening: Prisma.ScreeningCreateNestedOneWithoutEntriesInput
}

export type ScreeningEntryUncheckedCreateWithoutStaffInput = {
  id?: string
  status?: string | null
  message?: string | null
  screeningId: string
  uploadedFiles: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryCreateOrConnectWithoutStaffInput = {
  where: Prisma.ScreeningEntryWhereUniqueInput
  create: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutStaffInput, Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput>
}

export type ScreeningEntryCreateManyStaffInputEnvelope = {
  data: Prisma.ScreeningEntryCreateManyStaffInput | Prisma.ScreeningEntryCreateManyStaffInput[]
  skipDuplicates?: boolean
}

export type ScreeningEntryUpsertWithWhereUniqueWithoutStaffInput = {
  where: Prisma.ScreeningEntryWhereUniqueInput
  update: Prisma.XOR<Prisma.ScreeningEntryUpdateWithoutStaffInput, Prisma.ScreeningEntryUncheckedUpdateWithoutStaffInput>
  create: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutStaffInput, Prisma.ScreeningEntryUncheckedCreateWithoutStaffInput>
}

export type ScreeningEntryUpdateWithWhereUniqueWithoutStaffInput = {
  where: Prisma.ScreeningEntryWhereUniqueInput
  data: Prisma.XOR<Prisma.ScreeningEntryUpdateWithoutStaffInput, Prisma.ScreeningEntryUncheckedUpdateWithoutStaffInput>
}

export type ScreeningEntryUpdateManyWithWhereWithoutStaffInput = {
  where: Prisma.ScreeningEntryScalarWhereInput
  data: Prisma.XOR<Prisma.ScreeningEntryUpdateManyMutationInput, Prisma.ScreeningEntryUncheckedUpdateManyWithoutStaffInput>
}

export type ScreeningEntryScalarWhereInput = {
  AND?: Prisma.ScreeningEntryScalarWhereInput | Prisma.ScreeningEntryScalarWhereInput[]
  OR?: Prisma.ScreeningEntryScalarWhereInput[]
  NOT?: Prisma.ScreeningEntryScalarWhereInput | Prisma.ScreeningEntryScalarWhereInput[]
  id?: Prisma.StringFilter<"ScreeningEntry"> | string
  staffId?: Prisma.StringFilter<"ScreeningEntry"> | string
  status?: Prisma.StringNullableFilter<"ScreeningEntry"> | string | null
  message?: Prisma.StringNullableFilter<"ScreeningEntry"> | string | null
  screeningId?: Prisma.StringFilter<"ScreeningEntry"> | string
  uploadedFiles?: Prisma.JsonFilter<"ScreeningEntry">
}

export type ScreeningEntryCreateWithoutScreeningInput = {
  id?: string
  status?: string | null
  message?: string | null
  uploadedFiles: Prisma.JsonNullValueInput | runtime.InputJsonValue
  staff: Prisma.UserCreateNestedOneWithoutScreeningEntriesInput
}

export type ScreeningEntryUncheckedCreateWithoutScreeningInput = {
  id?: string
  staffId: string
  status?: string | null
  message?: string | null
  uploadedFiles: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryCreateOrConnectWithoutScreeningInput = {
  where: Prisma.ScreeningEntryWhereUniqueInput
  create: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutScreeningInput, Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput>
}

export type ScreeningEntryCreateManyScreeningInputEnvelope = {
  data: Prisma.ScreeningEntryCreateManyScreeningInput | Prisma.ScreeningEntryCreateManyScreeningInput[]
  skipDuplicates?: boolean
}

export type ScreeningEntryUpsertWithWhereUniqueWithoutScreeningInput = {
  where: Prisma.ScreeningEntryWhereUniqueInput
  update: Prisma.XOR<Prisma.ScreeningEntryUpdateWithoutScreeningInput, Prisma.ScreeningEntryUncheckedUpdateWithoutScreeningInput>
  create: Prisma.XOR<Prisma.ScreeningEntryCreateWithoutScreeningInput, Prisma.ScreeningEntryUncheckedCreateWithoutScreeningInput>
}

export type ScreeningEntryUpdateWithWhereUniqueWithoutScreeningInput = {
  where: Prisma.ScreeningEntryWhereUniqueInput
  data: Prisma.XOR<Prisma.ScreeningEntryUpdateWithoutScreeningInput, Prisma.ScreeningEntryUncheckedUpdateWithoutScreeningInput>
}

export type ScreeningEntryUpdateManyWithWhereWithoutScreeningInput = {
  where: Prisma.ScreeningEntryScalarWhereInput
  data: Prisma.XOR<Prisma.ScreeningEntryUpdateManyMutationInput, Prisma.ScreeningEntryUncheckedUpdateManyWithoutScreeningInput>
}

export type ScreeningEntryCreateManyStaffInput = {
  id?: string
  status?: string | null
  message?: string | null
  screeningId: string
  uploadedFiles: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  screening?: Prisma.ScreeningUpdateOneRequiredWithoutEntriesNestedInput
}

export type ScreeningEntryUncheckedUpdateWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screeningId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryUncheckedUpdateManyWithoutStaffInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screeningId?: Prisma.StringFieldUpdateOperationsInput | string
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryCreateManyScreeningInput = {
  id?: string
  staffId: string
  status?: string | null
  message?: string | null
  uploadedFiles: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryUpdateWithoutScreeningInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  staff?: Prisma.UserUpdateOneRequiredWithoutScreeningEntriesNestedInput
}

export type ScreeningEntryUncheckedUpdateWithoutScreeningInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ScreeningEntryUncheckedUpdateManyWithoutScreeningInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uploadedFiles?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}



export type ScreeningEntrySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  staffId?: boolean
  status?: boolean
  message?: boolean
  screeningId?: boolean
  uploadedFiles?: boolean
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  screening?: boolean | Prisma.ScreeningDefaultArgs<ExtArgs>
}, ExtArgs["result"]["screeningEntry"]>

export type ScreeningEntrySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  staffId?: boolean
  status?: boolean
  message?: boolean
  screeningId?: boolean
  uploadedFiles?: boolean
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  screening?: boolean | Prisma.ScreeningDefaultArgs<ExtArgs>
}, ExtArgs["result"]["screeningEntry"]>

export type ScreeningEntrySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  staffId?: boolean
  status?: boolean
  message?: boolean
  screeningId?: boolean
  uploadedFiles?: boolean
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  screening?: boolean | Prisma.ScreeningDefaultArgs<ExtArgs>
}, ExtArgs["result"]["screeningEntry"]>

export type ScreeningEntrySelectScalar = {
  id?: boolean
  staffId?: boolean
  status?: boolean
  message?: boolean
  screeningId?: boolean
  uploadedFiles?: boolean
}

export type ScreeningEntryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "staffId" | "status" | "message" | "screeningId" | "uploadedFiles", ExtArgs["result"]["screeningEntry"]>
export type ScreeningEntryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  screening?: boolean | Prisma.ScreeningDefaultArgs<ExtArgs>
}
export type ScreeningEntryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  screening?: boolean | Prisma.ScreeningDefaultArgs<ExtArgs>
}
export type ScreeningEntryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  staff?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  screening?: boolean | Prisma.ScreeningDefaultArgs<ExtArgs>
}

export type $ScreeningEntryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ScreeningEntry"
  objects: {
    staff: Prisma.$UserPayload<ExtArgs>
    screening: Prisma.$ScreeningPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    staffId: string
    status: string | null
    message: string | null
    screeningId: string
    uploadedFiles: runtime.JsonValue
  }, ExtArgs["result"]["screeningEntry"]>
  composites: {}
}

export type ScreeningEntryGetPayload<S extends boolean | null | undefined | ScreeningEntryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload, S>

export type ScreeningEntryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ScreeningEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ScreeningEntryCountAggregateInputType | true
  }

export interface ScreeningEntryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScreeningEntry'], meta: { name: 'ScreeningEntry' } }
  /**
   * Find zero or one ScreeningEntry that matches the filter.
   * @param {ScreeningEntryFindUniqueArgs} args - Arguments to find a ScreeningEntry
   * @example
   * // Get one ScreeningEntry
   * const screeningEntry = await prisma.screeningEntry.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScreeningEntryFindUniqueArgs>(args: Prisma.SelectSubset<T, ScreeningEntryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ScreeningEntryClient<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ScreeningEntry that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScreeningEntryFindUniqueOrThrowArgs} args - Arguments to find a ScreeningEntry
   * @example
   * // Get one ScreeningEntry
   * const screeningEntry = await prisma.screeningEntry.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScreeningEntryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ScreeningEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScreeningEntryClient<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ScreeningEntry that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningEntryFindFirstArgs} args - Arguments to find a ScreeningEntry
   * @example
   * // Get one ScreeningEntry
   * const screeningEntry = await prisma.screeningEntry.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScreeningEntryFindFirstArgs>(args?: Prisma.SelectSubset<T, ScreeningEntryFindFirstArgs<ExtArgs>>): Prisma.Prisma__ScreeningEntryClient<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ScreeningEntry that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningEntryFindFirstOrThrowArgs} args - Arguments to find a ScreeningEntry
   * @example
   * // Get one ScreeningEntry
   * const screeningEntry = await prisma.screeningEntry.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScreeningEntryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ScreeningEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScreeningEntryClient<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ScreeningEntries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningEntryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ScreeningEntries
   * const screeningEntries = await prisma.screeningEntry.findMany()
   * 
   * // Get first 10 ScreeningEntries
   * const screeningEntries = await prisma.screeningEntry.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const screeningEntryWithIdOnly = await prisma.screeningEntry.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ScreeningEntryFindManyArgs>(args?: Prisma.SelectSubset<T, ScreeningEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ScreeningEntry.
   * @param {ScreeningEntryCreateArgs} args - Arguments to create a ScreeningEntry.
   * @example
   * // Create one ScreeningEntry
   * const ScreeningEntry = await prisma.screeningEntry.create({
   *   data: {
   *     // ... data to create a ScreeningEntry
   *   }
   * })
   * 
   */
  create<T extends ScreeningEntryCreateArgs>(args: Prisma.SelectSubset<T, ScreeningEntryCreateArgs<ExtArgs>>): Prisma.Prisma__ScreeningEntryClient<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ScreeningEntries.
   * @param {ScreeningEntryCreateManyArgs} args - Arguments to create many ScreeningEntries.
   * @example
   * // Create many ScreeningEntries
   * const screeningEntry = await prisma.screeningEntry.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ScreeningEntryCreateManyArgs>(args?: Prisma.SelectSubset<T, ScreeningEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ScreeningEntries and returns the data saved in the database.
   * @param {ScreeningEntryCreateManyAndReturnArgs} args - Arguments to create many ScreeningEntries.
   * @example
   * // Create many ScreeningEntries
   * const screeningEntry = await prisma.screeningEntry.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ScreeningEntries and only return the `id`
   * const screeningEntryWithIdOnly = await prisma.screeningEntry.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ScreeningEntryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ScreeningEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ScreeningEntry.
   * @param {ScreeningEntryDeleteArgs} args - Arguments to delete one ScreeningEntry.
   * @example
   * // Delete one ScreeningEntry
   * const ScreeningEntry = await prisma.screeningEntry.delete({
   *   where: {
   *     // ... filter to delete one ScreeningEntry
   *   }
   * })
   * 
   */
  delete<T extends ScreeningEntryDeleteArgs>(args: Prisma.SelectSubset<T, ScreeningEntryDeleteArgs<ExtArgs>>): Prisma.Prisma__ScreeningEntryClient<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ScreeningEntry.
   * @param {ScreeningEntryUpdateArgs} args - Arguments to update one ScreeningEntry.
   * @example
   * // Update one ScreeningEntry
   * const screeningEntry = await prisma.screeningEntry.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ScreeningEntryUpdateArgs>(args: Prisma.SelectSubset<T, ScreeningEntryUpdateArgs<ExtArgs>>): Prisma.Prisma__ScreeningEntryClient<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ScreeningEntries.
   * @param {ScreeningEntryDeleteManyArgs} args - Arguments to filter ScreeningEntries to delete.
   * @example
   * // Delete a few ScreeningEntries
   * const { count } = await prisma.screeningEntry.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ScreeningEntryDeleteManyArgs>(args?: Prisma.SelectSubset<T, ScreeningEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ScreeningEntries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningEntryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ScreeningEntries
   * const screeningEntry = await prisma.screeningEntry.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ScreeningEntryUpdateManyArgs>(args: Prisma.SelectSubset<T, ScreeningEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ScreeningEntries and returns the data updated in the database.
   * @param {ScreeningEntryUpdateManyAndReturnArgs} args - Arguments to update many ScreeningEntries.
   * @example
   * // Update many ScreeningEntries
   * const screeningEntry = await prisma.screeningEntry.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ScreeningEntries and only return the `id`
   * const screeningEntryWithIdOnly = await prisma.screeningEntry.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ScreeningEntryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ScreeningEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ScreeningEntry.
   * @param {ScreeningEntryUpsertArgs} args - Arguments to update or create a ScreeningEntry.
   * @example
   * // Update or create a ScreeningEntry
   * const screeningEntry = await prisma.screeningEntry.upsert({
   *   create: {
   *     // ... data to create a ScreeningEntry
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ScreeningEntry we want to update
   *   }
   * })
   */
  upsert<T extends ScreeningEntryUpsertArgs>(args: Prisma.SelectSubset<T, ScreeningEntryUpsertArgs<ExtArgs>>): Prisma.Prisma__ScreeningEntryClient<runtime.Types.Result.GetResult<Prisma.$ScreeningEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ScreeningEntries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningEntryCountArgs} args - Arguments to filter ScreeningEntries to count.
   * @example
   * // Count the number of ScreeningEntries
   * const count = await prisma.screeningEntry.count({
   *   where: {
   *     // ... the filter for the ScreeningEntries we want to count
   *   }
   * })
  **/
  count<T extends ScreeningEntryCountArgs>(
    args?: Prisma.Subset<T, ScreeningEntryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ScreeningEntryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ScreeningEntry.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ScreeningEntryAggregateArgs>(args: Prisma.Subset<T, ScreeningEntryAggregateArgs>): Prisma.PrismaPromise<GetScreeningEntryAggregateType<T>>

  /**
   * Group by ScreeningEntry.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreeningEntryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ScreeningEntryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScreeningEntryGroupByArgs['orderBy'] }
      : { orderBy?: ScreeningEntryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ScreeningEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScreeningEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ScreeningEntry model
 */
readonly fields: ScreeningEntryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ScreeningEntry.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScreeningEntryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  staff<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  screening<T extends Prisma.ScreeningDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ScreeningDefaultArgs<ExtArgs>>): Prisma.Prisma__ScreeningClient<runtime.Types.Result.GetResult<Prisma.$ScreeningPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ScreeningEntry model
 */
export interface ScreeningEntryFieldRefs {
  readonly id: Prisma.FieldRef<"ScreeningEntry", 'String'>
  readonly staffId: Prisma.FieldRef<"ScreeningEntry", 'String'>
  readonly status: Prisma.FieldRef<"ScreeningEntry", 'String'>
  readonly message: Prisma.FieldRef<"ScreeningEntry", 'String'>
  readonly screeningId: Prisma.FieldRef<"ScreeningEntry", 'String'>
  readonly uploadedFiles: Prisma.FieldRef<"ScreeningEntry", 'Json'>
}
    

// Custom InputTypes
/**
 * ScreeningEntry findUnique
 */
export type ScreeningEntryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  /**
   * Filter, which ScreeningEntry to fetch.
   */
  where: Prisma.ScreeningEntryWhereUniqueInput
}

/**
 * ScreeningEntry findUniqueOrThrow
 */
export type ScreeningEntryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  /**
   * Filter, which ScreeningEntry to fetch.
   */
  where: Prisma.ScreeningEntryWhereUniqueInput
}

/**
 * ScreeningEntry findFirst
 */
export type ScreeningEntryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  /**
   * Filter, which ScreeningEntry to fetch.
   */
  where?: Prisma.ScreeningEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScreeningEntries to fetch.
   */
  orderBy?: Prisma.ScreeningEntryOrderByWithRelationInput | Prisma.ScreeningEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ScreeningEntries.
   */
  cursor?: Prisma.ScreeningEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScreeningEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScreeningEntries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ScreeningEntries.
   */
  distinct?: Prisma.ScreeningEntryScalarFieldEnum | Prisma.ScreeningEntryScalarFieldEnum[]
}

/**
 * ScreeningEntry findFirstOrThrow
 */
export type ScreeningEntryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  /**
   * Filter, which ScreeningEntry to fetch.
   */
  where?: Prisma.ScreeningEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScreeningEntries to fetch.
   */
  orderBy?: Prisma.ScreeningEntryOrderByWithRelationInput | Prisma.ScreeningEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ScreeningEntries.
   */
  cursor?: Prisma.ScreeningEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScreeningEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScreeningEntries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ScreeningEntries.
   */
  distinct?: Prisma.ScreeningEntryScalarFieldEnum | Prisma.ScreeningEntryScalarFieldEnum[]
}

/**
 * ScreeningEntry findMany
 */
export type ScreeningEntryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  /**
   * Filter, which ScreeningEntries to fetch.
   */
  where?: Prisma.ScreeningEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScreeningEntries to fetch.
   */
  orderBy?: Prisma.ScreeningEntryOrderByWithRelationInput | Prisma.ScreeningEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ScreeningEntries.
   */
  cursor?: Prisma.ScreeningEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScreeningEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScreeningEntries.
   */
  skip?: number
  distinct?: Prisma.ScreeningEntryScalarFieldEnum | Prisma.ScreeningEntryScalarFieldEnum[]
}

/**
 * ScreeningEntry create
 */
export type ScreeningEntryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  /**
   * The data needed to create a ScreeningEntry.
   */
  data: Prisma.XOR<Prisma.ScreeningEntryCreateInput, Prisma.ScreeningEntryUncheckedCreateInput>
}

/**
 * ScreeningEntry createMany
 */
export type ScreeningEntryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ScreeningEntries.
   */
  data: Prisma.ScreeningEntryCreateManyInput | Prisma.ScreeningEntryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ScreeningEntry createManyAndReturn
 */
export type ScreeningEntryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * The data used to create many ScreeningEntries.
   */
  data: Prisma.ScreeningEntryCreateManyInput | Prisma.ScreeningEntryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ScreeningEntry update
 */
export type ScreeningEntryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  /**
   * The data needed to update a ScreeningEntry.
   */
  data: Prisma.XOR<Prisma.ScreeningEntryUpdateInput, Prisma.ScreeningEntryUncheckedUpdateInput>
  /**
   * Choose, which ScreeningEntry to update.
   */
  where: Prisma.ScreeningEntryWhereUniqueInput
}

/**
 * ScreeningEntry updateMany
 */
export type ScreeningEntryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ScreeningEntries.
   */
  data: Prisma.XOR<Prisma.ScreeningEntryUpdateManyMutationInput, Prisma.ScreeningEntryUncheckedUpdateManyInput>
  /**
   * Filter which ScreeningEntries to update
   */
  where?: Prisma.ScreeningEntryWhereInput
  /**
   * Limit how many ScreeningEntries to update.
   */
  limit?: number
}

/**
 * ScreeningEntry updateManyAndReturn
 */
export type ScreeningEntryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * The data used to update ScreeningEntries.
   */
  data: Prisma.XOR<Prisma.ScreeningEntryUpdateManyMutationInput, Prisma.ScreeningEntryUncheckedUpdateManyInput>
  /**
   * Filter which ScreeningEntries to update
   */
  where?: Prisma.ScreeningEntryWhereInput
  /**
   * Limit how many ScreeningEntries to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ScreeningEntry upsert
 */
export type ScreeningEntryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  /**
   * The filter to search for the ScreeningEntry to update in case it exists.
   */
  where: Prisma.ScreeningEntryWhereUniqueInput
  /**
   * In case the ScreeningEntry found by the `where` argument doesn't exist, create a new ScreeningEntry with this data.
   */
  create: Prisma.XOR<Prisma.ScreeningEntryCreateInput, Prisma.ScreeningEntryUncheckedCreateInput>
  /**
   * In case the ScreeningEntry was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScreeningEntryUpdateInput, Prisma.ScreeningEntryUncheckedUpdateInput>
}

/**
 * ScreeningEntry delete
 */
export type ScreeningEntryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
  /**
   * Filter which ScreeningEntry to delete.
   */
  where: Prisma.ScreeningEntryWhereUniqueInput
}

/**
 * ScreeningEntry deleteMany
 */
export type ScreeningEntryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ScreeningEntries to delete
   */
  where?: Prisma.ScreeningEntryWhereInput
  /**
   * Limit how many ScreeningEntries to delete.
   */
  limit?: number
}

/**
 * ScreeningEntry without action
 */
export type ScreeningEntryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScreeningEntry
   */
  select?: Prisma.ScreeningEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScreeningEntry
   */
  omit?: Prisma.ScreeningEntryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreeningEntryInclude<ExtArgs> | null
}
